// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BitmovinPlayer
import AVFoundation
@_exported import BitmovinPlayer
import Foundation
import Swift
import UIKit
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPUIDeviceVersionHelper) @objcMembers public class _UIDeviceVersionHelper : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc public func isSystemVersionGreaterThanOrEqual(_ versionToCheck: Swift.Double) -> Swift.Bool
  @objc public func isSystemVersionLessThan(_ versionToCheck: Swift.Double) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlayerActiveEvent) final public class PlayerActiveEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objcMembers @objc public class _BMPAVPlayer : AVFoundation.AVQueuePlayer {
  @objc override dynamic public var currentItem: BitmovinPlayer._BMPAVPlayerItem? {
    @objc get
  }
  @objc override dynamic public init()
  @objc(addObserver:) public func add(observer: BitmovinPlayer._AVPlayerObserver)
  @objc(removeObserver:) public func remove(observer: BitmovinPlayer._AVPlayerObserver)
  @objc(seekToTime:toleranceBefore:toleranceAfter:suppressEvents:completionHandler:) public func seek(time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, suppressEvents: Swift.Bool, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc override dynamic public init(items: [AVFoundation.AVPlayerItem])
  @objc override dynamic public init(url URL: Foundation.URL)
  @objc override dynamic public init(playerItem item: AVFoundation.AVPlayerItem?)
}
@objc(_BMPLogLevel) public enum _LogLevel : Swift.Int {
  case verbose = 0
  case info
  case debug
  case warning
  case error
  case none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPLogger) public protocol _Logger {
  @objc func log(_ message: Swift.String, level: BitmovinPlayer._LogLevel)
}
@objc(_BMPSeekingService) public protocol _SeekingService : BitmovinPlayer._Service {
  @objc var isSeekOrTimeShiftInProgress: Swift.Bool { get }
  @objc var isSeeking: Swift.Bool { get }
  @objc(seekToSource:time:) func seek(to source: BitmovinPlayer.Source, time: Foundation.TimeInterval)
  @objc(timeShift:) func timeShift(to time: Foundation.TimeInterval)
  @objc func seekBackToStartIfNeeded()
  @objc func adjustToTargetStartTime(_ startTime: Foundation.TimeInterval)
}
@objc(BMPSource) public protocol Source : BitmovinPlayer.SourceEventHandler {
  @objc var sourceItem: BitmovinPlayer.SourceItem { get }
  @objc var isActive: Swift.Bool { get }
  @objc var duration: Foundation.TimeInterval { get }
  @objc var state: BitmovinPlayer.SourceState { get }
}
@objcMembers @objc(_BMPDefaultBufferService) public class _DefaultBufferService : BitmovinPlayer._DefaultService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(player: BitmovinPlayer._BMPAVPlayer, timeService: BitmovinPlayer._TimeService, playerEventEmitter: BitmovinPlayer._PlayerEventEmitter, configurationService: BitmovinPlayer._ConfigurationService, playlistSourcesProvider: BitmovinPlayer._PlaylistSourcesProvider)
  @objc override dynamic public func start()
  @objc override dynamic public func stop()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultBufferService : BitmovinPlayer._BufferService {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
extension _DefaultBufferService : BitmovinPlayer._PlayerListenerInternal {
  @objc dynamic public func onConfigurationUpdated(_ event: BitmovinPlayer.ConfigurationUpdatedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onPlayerActive(_ event: BitmovinPlayer.PlayerActiveEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onPlayerInactive(_ event: BitmovinPlayer.PlayerInactiveEvent, player: BitmovinPlayer.Player)
}
extension _DefaultBufferService : BitmovinPlayer._AVPlayerItemListener {
  @objc dynamic public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, didChange oldStatus: AVFoundation.AVPlayerItem.Status, newStatus: AVFoundation.AVPlayerItem.Status)
}
@objcMembers @objc(_BMPDefaultPlaylistTransitioningService) public class _DefaultPlaylistTransitioningService : BitmovinPlayer._DefaultService, BitmovinPlayer._PlaylistTransitioningService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(playerEventEmitter: BitmovinPlayer._PlayerEventEmitter)
  @objc override dynamic public func start()
  @objc override dynamic public func stop()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultPlaylistTransitioningService : BitmovinPlayer._PlayerListenerInternal {
  @objc dynamic public func onInternalActiveSourceChanged(_ event: BitmovinPlayer._InternalActiveSourceChangedEvent, player: BitmovinPlayer.Player)
}
@objcMembers @objc(BMPSourceUnloadedEvent) final public class SourceUnloadedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: BitmovinPlayer.Source
  @objc public init(source: BitmovinPlayer.Source)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultPlaylistManipulator) public class _DefaultPlaylistManipulator : ObjectiveC.NSObject, BitmovinPlayer._PlaylistManipulator {
  @objc public func replace(decryptionKeyUrl keyUrl: Swift.String, with keyData: Foundation.Data, in playlist: Swift.String, decryptionKeyStoreStrategy keyStoreStrategy: BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy) -> Swift.String
  @objc public func replace(manifestUrl url: Swift.String, with customUrl: Swift.String, in playlist: Swift.String) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(_BMPVariantPlaylistLoadedEvent) @objcMembers final public class _VariantPlaylistLoadedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: Foundation.Data
  @objc final public let url: Foundation.URL
  @objc convenience public init(data: Foundation.Data, requestUrl: Foundation.URL)
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPCaptionHandler) public protocol _CaptionHandler {
  @objc weak var delegate: BitmovinPlayer._CaptionHandlerDelegate? { get set }
  @objc var availableSubtitleTracks: [BitmovinPlayer.SubtitleTrack] { get }
  @objc var activeSubtitleTrack: BitmovinPlayer.SubtitleTrack? { get }
  @objc var defaultSubtitleTrack: BitmovinPlayer.SubtitleTrack? { get }
  @objc(initializeSubtitleTracksWithSourceItem:) func initializeSubtitleTracks(with sourceItem: BitmovinPlayer.SourceItem)
  @objc func enableSubtitleTrack(byId subtitleTrackId: Swift.String?)
  @objc func disableActiveSubtitleTrack()
  @objc(addSubtitleTrack:) func add(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc func removeSubtitleTrack(byId subtitleTrackId: Swift.String)
  @objc(containsSubtitleTrack:) func contains(subtitleTrack: BitmovinPlayer.SubtitleTrack) -> Swift.Bool
  @objc func clearSubtitleTracks()
  @objc func forcedSubtitleTrack(forLanguage language: Swift.String) -> BitmovinPlayer.SubtitleTrack?
}
@objc(_BMPPlaylistService) public protocol _PlaylistService {
  @objc(loadPlaylistConfiguration:) func load(playlistConfig: BitmovinPlayer.PlaylistConfiguration)
  @objc func unload()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPPlayEvent) @objcMembers final public class PlayEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(BMPPlaylistConfiguration) final public class PlaylistConfiguration : BitmovinPlayer.Configuration {
  @objc final public let sources: [BitmovinPlayer.Source]
  @objc final public let options: BitmovinPlayer.PlaylistOptions
  @objc convenience public init(sources: [BitmovinPlayer.Source])
  @objc public init(sources: [BitmovinPlayer.Source], options: BitmovinPlayer.PlaylistOptions)
  @available(*, unavailable)
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPBufferLevel) public class BufferLevel : ObjectiveC.NSObject {
  @objc final public let level: Foundation.TimeInterval
  @objc final public let targetLevel: Foundation.TimeInterval
  @objc final public let media: BitmovinPlayer.MediaType
  @objc final public let type: BitmovinPlayer.BufferType
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPInternalSourcePlaybackFinishedEvent) public class _InternalSourcePlaybackFinishedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPStartOffsetCalculator) final public class _StartOffsetCalculator : ObjectiveC.NSObject {
  @objc(calculateStartOffsetForVoDWithSourceOptions:totalDuration:) public static func calculateStartOffsetForVoD(with sourceOptions: BitmovinPlayer.SourceOptions, totalDuration: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc(calculateStartOffsetForLiveWithSourceOptions:maxTimeShift:) public static func calculateStartOffsetForLive(with sourceOptions: BitmovinPlayer.SourceOptions, maxTimeShift: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPAVPlayerCaptionHandler) final public class _AVPlayerCaptionHandler : ObjectiveC.NSObject {
  @objc weak final public var delegate: BitmovinPlayer._CaptionHandlerDelegate?
  @objc final public var activeSubtitleTrack: BitmovinPlayer.SubtitleTrack? {
    get
  }
  @objc final public var availableSubtitleTracks: [BitmovinPlayer.SubtitleTrack] {
    get
  }
  @objc convenience public init(configurationService: BitmovinPlayer._ConfigurationService, player: BitmovinPlayer._BMPAVPlayer)
  @objc deinit
  @objc override dynamic public init()
}
extension _AVPlayerCaptionHandler : BitmovinPlayer._CaptionHandler {
  @objc final public var defaultSubtitleTrack: BitmovinPlayer.SubtitleTrack? {
    @objc get
  }
  @objc final public func initializeSubtitleTracks(with sourceItem: BitmovinPlayer.SourceItem)
  @objc final public func enableSubtitleTrack(byId subtitleTrackId: Swift.String?)
  @objc final public func disableActiveSubtitleTrack()
  @objc final public func add(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc final public func removeSubtitleTrack(byId subtitleTrackId: Swift.String)
  @objc final public func contains(subtitleTrack: BitmovinPlayer.SubtitleTrack) -> Swift.Bool
  @objc final public func clearSubtitleTracks()
  @objc final public func forcedSubtitleTrack(forLanguage language: Swift.String) -> BitmovinPlayer.SubtitleTrack?
}
extension _AVPlayerCaptionHandler : BitmovinPlayer._AVPlayerObserver {
  @objc final public func player(_ player: BitmovinPlayer._BMPAVPlayer, didChangeCurrentItem oldItem: BitmovinPlayer._BMPAVPlayerItem?, newItem: BitmovinPlayer._BMPAVPlayerItem?)
}
extension _AVPlayerCaptionHandler : BitmovinPlayer._AVPlayerItemListener {
  @objc final public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, willChangeMediaOptionFrom from: AVFoundation.AVMediaSelectionOption?, to: AVFoundation.AVMediaSelectionOption?, in mediaSelectionGroup: AVFoundation.AVMediaSelectionGroup)
  @objc final public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, didChangeMediaOptionFrom from: AVFoundation.AVMediaSelectionOption?, to: AVFoundation.AVMediaSelectionOption?, in mediaSelectionGroup: AVFoundation.AVMediaSelectionGroup)
  @objc final public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, willSeekToTargetTime seekTarget: CoreMedia.CMTime)
  @objc final public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, didSeekWithSuccess finished: Swift.Bool)
}
@objc(_BMPResourceLoaderService) public protocol _ResourceLoaderService {
  @objc(setupResourceLoadersWithSourceItem:asset:) func setupResourceLoaders(with sourceItem: BitmovinPlayer.SourceItem, asset: AVFoundation.AVURLAsset)
}
@objc(BMPPlaylistApi) public protocol PlaylistApi {
  @objc var sources: [BitmovinPlayer.Source] { get }
  @objc func seek(source: BitmovinPlayer.Source, time: Foundation.TimeInterval)
}
@objc(_BMPInitializationService) public protocol _InitializationService : BitmovinPlayer._Service {
  @objc var selectedStreamType: BitmovinPlayer.MediaSourceType { get }
  @objc(setup:) func setup(playerConfig: BitmovinPlayer.PlayerConfiguration)
  @objc(loadSourceItem:) func load(sourceItem: BitmovinPlayer.SourceItem)
}
@objc(_BMPVideoService) public protocol _VideoService {
  @objc var availableVideoQualities: [BitmovinPlayer.VideoQuality] { get }
  @objc var videoQuality: BitmovinPlayer.VideoQuality? { get }
}
@available(*, deprecated, message: "Use SourceInternal instead! (Only available in Swift)")
@objc(_BMPLegacySourceInternal) public protocol _LegacySourceInternal : AnyObject, BitmovinPlayer.Source {
  @objc var isActive: Swift.Bool { get set }
  @objc var state: BitmovinPlayer.SourceState { get set }
  @objc var urlAsset: AVFoundation.AVURLAsset { get }
  @objc var playerItem: BitmovinPlayer._BMPAVPlayerItem { get }
  @objc var streamType: BitmovinPlayer.MediaSourceType { get }
}
@objcMembers @objc(BMPSourceUnloadEvent) final public class SourceUnloadEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: BitmovinPlayer.Source
  @objc public init(source: BitmovinPlayer.Source)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalActiveSourceChangedEvent) final public class _InternalActiveSourceChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer._LegacySourceInternal?
  @objc final public let to: BitmovinPlayer._LegacySourceInternal?
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objcMembers @objc(BMPSourceLoadedEvent) final public class SourceLoadedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: BitmovinPlayer.Source
  @objc public init(source: BitmovinPlayer.Source)
  @objc final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
extension SourceLoadedEvent : BitmovinPlayer.BMPJsonEncodable {
  @objc final public func toJsonString() throws -> Swift.String
}
@objc(_BMPSourceListenerInternal) public protocol _SourceListenerInternal : BitmovinPlayer.SourceListener {
  @objc optional func onInternalSourcePlaybackFinished(_ event: BitmovinPlayer._InternalSourcePlaybackFinishedEvent, source: BitmovinPlayer.Source)
}
@objc(_BMPPlaylistTransitioningService) public protocol _PlaylistTransitioningService {
}
@objc(BMPSourceListener) public protocol SourceListener : ObjectiveC.NSObjectProtocol {
  @objc optional func onDurationChanged(_ event: BitmovinPlayer.DurationChangedEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceLoad(_ event: BitmovinPlayer.SourceLoadEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceUnload(_ event: BitmovinPlayer.SourceUnloadEvent, source: BitmovinPlayer.Source)
  @objc optional func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent, source: BitmovinPlayer.Source)
  @objc optional func onEvent(_ event: BitmovinPlayer.SourceEvent, source: BitmovinPlayer.Source)
}
@objc(_BMPSourceEventEmitter) public protocol _SourceEventEmitter {
  @objc func emit(event: BitmovinPlayer.SourceEvent, isInternal: Swift.Bool)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPPlaylistTransitionEvent) final public class PlaylistTransitionEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.Source
  @objc final public let to: BitmovinPlayer.Source
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPAudioAddedEvent) @objcMembers final public class AudioAddedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let audioTrack: BitmovinPlayer.AudioTrack
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(audioTrack: BitmovinPlayer.AudioTrack, time: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(_BMPInitialTimeShiftContext) final public class _InitialTimeShiftContext : ObjectiveC.NSObject {
  @objc final public let initialTimestamp: Foundation.TimeInterval
  @objc final public let initialLiveEdge: Foundation.TimeInterval
  @objc public init(initialTimestamp: Foundation.TimeInterval, initialLiveEdge: Foundation.TimeInterval)
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(BMPSourceLoadEvent) final public class SourceLoadEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let source: BitmovinPlayer.Source
  @objc public init(source: BitmovinPlayer.Source)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPDefaultSeekingService) final public class _DefaultSeekingService : BitmovinPlayer._DefaultService {
  @objc final public var isSeeking: Swift.Bool {
    get
  }
  @objc final public var isSeekOrTimeShiftInProgress: Swift.Bool {
    get
  }
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc convenience public init(player: BitmovinPlayer._BMPAVPlayer, timeService: BitmovinPlayer._TimeService, playbackService: BitmovinPlayer._PlaybackService, currentSourceProvider: BitmovinPlayer._CurrentSourceProvider, playlistSourcesProvider: BitmovinPlayer._PlaylistSourcesProvider, sourcesProvider: BitmovinPlayer._PlaylistSourcesProvider, logger: BitmovinPlayer._Logger, playerEventEmitter: BitmovinPlayer._PlayerEventEmitter)
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func adjustToTargetStartTime(_ startTime: Foundation.TimeInterval)
  @objc final public func seekBackToStartIfNeeded()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultSeekingService : BitmovinPlayer._AVPlayerObserver {
  @objc final public func player(_ player: BitmovinPlayer._BMPAVPlayer, willSeekToTargetTime seekTarget: CoreMedia.CMTime, suppressEvents: Swift.Bool)
  @objc final public func player(_ player: BitmovinPlayer._BMPAVPlayer, didSeekWithSuccess finished: Swift.Bool, suppressEvents: Swift.Bool)
}
extension _DefaultSeekingService : BitmovinPlayer.PlayerListener {
  @objc final public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent, player: BitmovinPlayer.Player)
}
extension _DefaultSeekingService : BitmovinPlayer._SeekingService {
  @objc final public func seek(to source: BitmovinPlayer.Source, time: Foundation.TimeInterval)
  @objc final public func timeShift(to time: Foundation.TimeInterval)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSeekedEvent) final public class SeekedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDeficiencyService) public protocol _DeficiencyService {
  @objc(throwError:) func throwError(code: Swift.Int)
  @objc func throwError(code: Swift.Int, message: Swift.String)
  @objc(throwError:replacements:) func throwError(code: Swift.Int, replacements: [Swift.String]?)
  @objc func throwLicensingErrorNoKey()
  @objc func throwLicensingErrorInvalidDomain()
  @objc func throwManifestNotFoundError(withReason reason: Swift.String?)
  @objc func throwSourceError()
  @objc(throwSourceError:) func throwSourceError(reason: Swift.String?)
  @objc(throwWarning:) func throwWarning(code: Swift.Int)
  @objc(throwWarning:replacements:) func throwWarning(code: Swift.Int, replacements: [Swift.String]?)
}
@objc(_BMPCurrentSourceProvider) public protocol _CurrentSourceProvider : AnyObject {
  @objc var currentSource: BitmovinPlayer._LegacySourceInternal? { get }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStyleConfiguration) final public class StyleConfiguration : BitmovinPlayer.Configuration {
  @objc final public var isUiEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var uiEnabled: Swift.Bool
  @objc final public var userInterfaceType: BitmovinPlayer.UserInterfaceType
  @objc @available(tvOS, unavailable)
  final public var playerUiCss: Foundation.URL
  @objc @available(tvOS, unavailable)
  final public var supplementalPlayerUiCss: Foundation.URL?
  @objc @available(tvOS, unavailable)
  final public var playerUiJs: Foundation.URL
  @objc final public var scalingMode: BitmovinPlayer.ScalingMode
  @objc final public var userInterfaceConfiguration: BitmovinPlayer.UserInterfaceConfiguration?
  @objc override dynamic public init()
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
public protocol _HexConvertible {
  var hexadecimal: Foundation.Data? { get }
  var normalizedHexString: Swift.String { get }
}
@_inheritsConvenienceInitializers @objc(BMPDestroyEvent) final public class DestroyEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPDefaultPlaybackFinishedService) @objcMembers final public class _DefaultPlaybackFinishedService : BitmovinPlayer._DefaultService, BitmovinPlayer._PlaybackFinishedService {
  @objc final public var isPlaybackFinished: Swift.Bool {
    get
  }
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(player: BitmovinPlayer._BMPAVPlayer, playerEventEmitter: BitmovinPlayer._PlayerEventEmitter, playlistSourcesProvider: BitmovinPlayer._PlaylistSourcesProvider)
  @objc override final public func start()
  @objc override final public func stop()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultPlaybackFinishedService : BitmovinPlayer._AVPlayerObserver {
  @objc final public func player(_ player: BitmovinPlayer._BMPAVPlayer, didChangeCurrentItem oldItem: BitmovinPlayer._BMPAVPlayerItem?, newItem: BitmovinPlayer._BMPAVPlayerItem?)
}
extension _DefaultPlaybackFinishedService : BitmovinPlayer._AVPlayerItemListener {
  @objc final public func playerItemDidPlayToEnd(playerItem: BitmovinPlayer._BMPAVPlayerItem)
}
extension _DefaultPlaybackFinishedService : BitmovinPlayer._PlayerListenerInternal {
  @objc final public func onInternalPlay(_ event: BitmovinPlayer._InternalPlayEvent, player: BitmovinPlayer.Player)
}
@objc(BMPSourceEvent) public protocol SourceEvent : BitmovinPlayer.Event {
}
@objc public protocol SourceEventHandler {
  @objc(addListener:) func add(listener: BitmovinPlayer.SourceListener)
  @objc(removeListener:) func remove(listener: BitmovinPlayer.SourceListener)
}
@objc(_BMPBufferApiDelegate) public protocol _BufferApiDelegate {
  @objc(bufferAPI_getLevel:) func bufferAPI_getLevel(type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc(bufferAPI_setTargetLevel:) func bufferAPI_setTargetLevel(value: Foundation.TimeInterval)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPPlayerFactory) public class PlayerFactory : ObjectiveC.NSObject {
  @objc(createWithPlayerConfig:) public static func create(playerConfig: BitmovinPlayer.PlayerConfiguration) -> BitmovinPlayer.Player
  @objc(create) public static func create() -> BitmovinPlayer.Player
  @objc deinit
}
@objcMembers @objc(_BMPDefaultPlaylistService) final public class _DefaultPlaylistService : BitmovinPlayer._DefaultService, BitmovinPlayer._PlaylistService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(player: BitmovinPlayer._BMPAVPlayer, playerSourceEventEmitter: BitmovinPlayer._SourceEventEmitter, playerConfigService: BitmovinPlayer._ConfigurationService, playerDeficiencyService: BitmovinPlayer._DeficiencyService, playbackService: BitmovinPlayer._PlaybackService, logger: BitmovinPlayer._Logger, playerEventEmitter: BitmovinPlayer._PlayerEventEmitter)
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultPlaylistService {
  @objc final public func load(playlistConfig: BitmovinPlayer.PlaylistConfiguration)
  @objc final public func unload()
}
extension _DefaultPlaylistService {
  @objc override final public func start()
  @objc override final public func stop()
}
extension _DefaultPlaylistService : BitmovinPlayer._AVPlayerObserver {
  @objc final public func player(_ player: BitmovinPlayer._BMPAVPlayer, didChangeCurrentItem oldItem: BitmovinPlayer._BMPAVPlayerItem?, newItem: BitmovinPlayer._BMPAVPlayerItem?)
}
extension _DefaultPlaylistService : BitmovinPlayer._CurrentSourceProvider {
  @objc final public var currentSource: BitmovinPlayer._LegacySourceInternal? {
    @objc get
  }
}
extension _DefaultPlaylistService : BitmovinPlayer._PlaylistSourcesProvider {
  @objc final public var sources: [BitmovinPlayer._LegacySourceInternal] {
    @objc get
  }
}
@objc(_BMPCafDrmConfigConvertible) public protocol _CafDrmConfigConvertible {
  @objc func toCafDrmConfig() -> BitmovinPlayer._CafDrmConfig?
}
extension WidevineConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig() -> BitmovinPlayer._CafDrmConfig?
}
extension ClearKeyConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig() -> BitmovinPlayer._CafDrmConfig?
}
extension PlayReadyConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig() -> BitmovinPlayer._CafDrmConfig?
}
@objcMembers @objc(BMPSeekPosition) public class SeekPosition : ObjectiveC.NSObject {
  @objc final public let source: BitmovinPlayer.Source
  @objc final public let time: Foundation.TimeInterval
  @objc public init(source: BitmovinPlayer.Source, time: Foundation.TimeInterval)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPTimeShiftStatus) final public class _TimeShiftStatus : ObjectiveC.NSObject {
  @objc final public let lastTimeShiftOffset: Foundation.TimeInterval
  @objc final public let lastTimeShiftReachedTime: Foundation.TimeInterval
  @objc final public let lastTimeShiftDate: Foundation.Date
  @objc public init(lastTimeShiftOffset: Foundation.TimeInterval, lastTimeShiftReachedTime: Foundation.TimeInterval, lastTimeShiftDate: Foundation.Date)
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPBufferService) public protocol _BufferService : BitmovinPlayer.BufferApi, BitmovinPlayer._Service {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPSourceFactory) public class SourceFactory : ObjectiveC.NSObject {
  @objc(createFrom:) public static func create(from sourceItem: BitmovinPlayer.SourceItem) -> BitmovinPlayer.Source
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultUrlAssetValuesLoader) @objcMembers public class _DefaultUrlAssetValuesLoader : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension _DefaultUrlAssetValuesLoader {
  @objc(loadValuesAsynchronouslyForAsset:onComplete:) dynamic public func loadValuesAsynchronously(for asset: AVFoundation.AVURLAsset, onComplete: ((AVFoundation.AVURLAsset, Swift.Bool, Swift.Bool) -> Swift.Void)?)
  @objc(triggerContentKeyRequestForAsset:) dynamic public func triggerContentKeyRequest(for asset: AVFoundation.AVURLAsset)
}
@_hasMissingDesignatedInitializers @objc(_BMPMasterPlaylistLoadedEvent) @objcMembers final public class _MasterPlaylistLoadedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let data: Foundation.Data
  @objc final public let url: Foundation.URL
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPTimeShiftEvent) final public class TimeShiftEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let position: Foundation.TimeInterval
  @objc final public let target: Foundation.TimeInterval
  @objc final public let timeShift: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPBitmovinLogger) public class _BitmovinLogger : ObjectiveC.NSObject, BitmovinPlayer._Logger {
  @objc public init(level: BitmovinPlayer._LogLevel)
  @objc override convenience dynamic public init()
  @objc public func log(_ message: Swift.String, level: BitmovinPlayer._LogLevel)
  @objc deinit
}
@objcMembers @objc(BMPPlaylistOptions) final public class PlaylistOptions : ObjectiveC.NSObject {
  @objc final public let preloadAllSources: Swift.Bool
  @objc public init(preloadAllSources: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPSeekEvent) final public class SeekEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.SeekPosition
  @objc final public let to: BitmovinPlayer.SeekPosition
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc(initWithFrom:to:) public init(from: BitmovinPlayer.SeekPosition, to: BitmovinPlayer.SeekPosition)
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPInternalTimeShiftEvent) final public class _InternalTimeShiftEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let position: Foundation.TimeInterval
  @objc final public let target: Foundation.TimeInterval
  @objc final public let timeShift: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInlinePlaylistDecryptionKeyStoreStrategy) public class _InlinePlaylistDecryptionKeyStoreStrategy : ObjectiveC.NSObject, BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy {
  @objc public func uri(for keyUrl: Swift.String, decryptionKeyData keyData: Foundation.Data) -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPPlaybackFinishedService) public protocol _PlaybackFinishedService {
  @objc var isPlaybackFinished: Swift.Bool { get }
}
@objc(_BMPDefaultEventEmitter) public class _DefaultEventEmitter : BitmovinPlayer._DefaultService, BitmovinPlayer._PlayerEventEmitter {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(player: BitmovinPlayer.Player)
  @objc public func emit(event: BitmovinPlayer.PlayerEvent)
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultEventEmitter : BitmovinPlayer.PlayerEventHandler {
  @objc dynamic public func add(listener: BitmovinPlayer.PlayerListener)
  @objc dynamic public func remove(listener: BitmovinPlayer.PlayerListener)
}
extension _DefaultEventEmitter : BitmovinPlayer._SourceEventEmitter {
  @objc dynamic public func emit(event: BitmovinPlayer.SourceEvent, isInternal: Swift.Bool = false)
}
@objcMembers @objc(_BMPPlayerPlaylistApi) public class _PlayerPlaylistApi : ObjectiveC.NSObject, BitmovinPlayer.PlaylistApi {
  @objc public var sources: [BitmovinPlayer.Source] {
    @objc get
  }
  @objc public init(delegate: BitmovinPlayer._PlaylistApiDelegate)
  @objc public func seek(source: BitmovinPlayer.Source, time: Foundation.TimeInterval = 0)
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPDefaultAudioService) @objcMembers final public class _DefaultAudioService : BitmovinPlayer._DefaultService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, player: BitmovinPlayer._BMPAVPlayer, currentSourceProvider: BitmovinPlayer._CurrentSourceProvider)
  @objc override final public func start()
  @objc override final public func stop()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultAudioService : BitmovinPlayer._AudioService {
  @objc final public var availableAudio: [BitmovinPlayer.AudioTrack] {
    @objc get
  }
  @objc final public var audio: BitmovinPlayer.AudioTrack? {
    @objc get
  }
  @objc final public func setupAudioTracks()
  @objc final public func setAudioWithIdentifier(_ audioTrackID: Swift.String)
}
extension _DefaultAudioService : BitmovinPlayer.PlayerListener {
  @objc final public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent, player: BitmovinPlayer.Player)
}
@objcMembers @objc(_BMPDefaultInitializationService) public class _DefaultInitializationService : BitmovinPlayer._DefaultService, BitmovinPlayer._InitializationService {
  @objc public var selectedStreamType: BitmovinPlayer.MediaSourceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, player: BitmovinPlayer._BMPAVPlayer, currentSourceProvider: BitmovinPlayer._CurrentSourceProvider)
  @objc public func setup(playerConfig: BitmovinPlayer.PlayerConfiguration)
  @objc public func load(sourceItem: BitmovinPlayer.SourceItem)
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultInitializationService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(BMPReadyEvent) final public class ReadyEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(BMPPlaybackFinishedEvent) @objcMembers final public class PlaybackFinishedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc deinit
}
@objc(_BMPPlaylistManipulator) public protocol _PlaylistManipulator : AnyObject {
  @objc func replace(decryptionKeyUrl keyUrl: Swift.String, with keyData: Foundation.Data, in playlist: Swift.String, decryptionKeyStoreStrategy keyStoreStrategy: BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy) -> Swift.String
  @objc(replaceManifestUrl:withCustomUrl:in:) func replace(manifestUrl url: Swift.String, with customUrl: Swift.String, in playlist: Swift.String) -> Swift.String
}
@_inheritsConvenienceInitializers @objc(_BMPInternalTimeShiftedEvent) final public class _InternalTimeShiftedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPDefaultDeficiencyService) final public class _DefaultDeficiencyService : BitmovinPlayer._DefaultService, BitmovinPlayer._DeficiencyService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator)
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func throwError(code: Swift.Int)
  @objc final public func throwError(code: Swift.Int, message: Swift.String)
  @objc final public func throwError(code: Swift.Int, replacements: [Swift.String]?)
  @objc final public func throwLicensingErrorNoKey()
  @objc final public func throwLicensingErrorInvalidDomain()
  @objc final public func throwManifestNotFoundError(withReason reason: Swift.String?)
  @objc final public func throwSourceError()
  @objc final public func throwSourceError(reason: Swift.String?)
  @objc final public func throwWarning(code: Swift.Int)
  @objc final public func throwWarning(code: Swift.Int, replacements: [Swift.String]?)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPPlayerInactiveEvent) final public class PlayerInactiveEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPGoogleCastBufferService) public class _GoogleCastBufferService : BitmovinPlayer._DefaultService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension _GoogleCastBufferService : BitmovinPlayer._BufferService {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
@objc(_BMPPlayerEventEmitter) public protocol _PlayerEventEmitter : BitmovinPlayer.PlayerEventHandler, BitmovinPlayer._Service {
  @objc(emitPlayerEvent:) func emit(event: BitmovinPlayer.PlayerEvent)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPExternalCaptionHandler) final public class _ExternalCaptionHandler : ObjectiveC.NSObject {
  @objc weak final public var delegate: BitmovinPlayer._CaptionHandlerDelegate?
  @objc final public var activeSubtitleTrack: BitmovinPlayer.SubtitleTrack? {
    get
  }
  @objc final public var availableSubtitleTracks: [BitmovinPlayer.SubtitleTrack] {
    get
  }
  @objc convenience public init(configurationService: BitmovinPlayer._ConfigurationService, deficiencyService: BitmovinPlayer._DeficiencyService, sourceEventEmitter: BitmovinPlayer._SourceEventEmitter, playerEventEmitter: BitmovinPlayer._PlayerEventEmitter)
  @objc deinit
  @objc override dynamic public init()
}
extension _ExternalCaptionHandler : BitmovinPlayer._CaptionHandler {
  @objc final public var defaultSubtitleTrack: BitmovinPlayer.SubtitleTrack? {
    @objc get
  }
  @objc final public func initializeSubtitleTracks(with sourceItem: BitmovinPlayer.SourceItem)
  @objc final public func enableSubtitleTrack(byId subtitleTrackId: Swift.String?)
  @objc final public func disableActiveSubtitleTrack()
  @objc final public func add(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc final public func removeSubtitleTrack(byId subtitleTrackId: Swift.String)
  @objc final public func contains(subtitleTrack: BitmovinPlayer.SubtitleTrack) -> Swift.Bool
  @objc final public func clearSubtitleTracks()
  @objc final public func forcedSubtitleTrack(forLanguage language: Swift.String) -> BitmovinPlayer.SubtitleTrack?
}
@objcMembers @objc(_BMPPlayerBufferApi) public class _PlayerBufferApi : ObjectiveC.NSObject {
  @objc public init(delegate: BitmovinPlayer._BufferApiDelegate)
  @objc deinit
  @objc override dynamic public init()
}
extension _PlayerBufferApi : BitmovinPlayer.BufferApi {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
@objc(BMPSourceState) public enum SourceState : Swift.Int {
  case idle
  case queued
  case loaded
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPCafDrmConfig) @objcMembers final public class _CafDrmConfig : ObjectiveC.NSObject {
  public enum ProtectionSystem : Swift.String {
    case widevine
    case playReady
    case clearKey
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public init(protectionSystem: BitmovinPlayer._CafDrmConfig.ProtectionSystem, licenseUrl: Foundation.URL, headers: [Swift.String : Swift.String]?)
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPMediaInfoCustomData) @objcMembers final public class _MediaInfoCustomData : ObjectiveC.NSObject {
  @objc public init(drm: BitmovinPlayer._CafDrmConfig?, metadata: [Swift.String : Swift.String]?)
  @objc final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
extension String : BitmovinPlayer._HexConvertible {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
extension NSString : BitmovinPlayer._HexConvertible {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
@objc(_BMPPlaylistSourcesProvider) public protocol _PlaylistSourcesProvider : AnyObject {
  @objc var sources: [BitmovinPlayer._LegacySourceInternal] { get }
}
@objc(_BMPMetadataMessage) @objcMembers final public class _MetadataMessage : ObjectiveC.NSObject {
  @objc public init(receiverVersion: BitmovinPlayer.GoogleCastReceiverVersion, data: [Swift.AnyHashable : Any])
  @objc final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(BMPDrmDataParsedEvent) @objcMembers final public class DrmDataParsedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let data: BitmovinPlayer.DrmData
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(data: BitmovinPlayer.DrmData)
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
}
@objc(BMPDrmData) @objcMembers final public class DrmData : ObjectiveC.NSObject {
  @objc(BMPDrmDataType) public enum DrmDataType : Swift.Int {
    case skdUri
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let data: Foundation.Data
  @objc final public let type: BitmovinPlayer.DrmData.DrmDataType
  @objc public init(data: Foundation.Data, type: BitmovinPlayer.DrmData.DrmDataType)
  @objc convenience public init?(skdUri: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(BMPDrmRequest) @objcMembers final public class DrmRequest : BitmovinPlayer.HttpRequest {
  @objc final public let drmData: BitmovinPlayer.DrmData
  @objc deinit
  @objc override dynamic public init(url: Foundation.URL, method: Swift.String)
}
@objc extension NSURLRequest {
  @objc dynamic public func _toBitmovinHttpRequest() -> BitmovinPlayer.HttpRequest?
  @objc dynamic public func _toBitmovinDrmRequest(skdUri: Swift.String) -> BitmovinPlayer.DrmRequest?
}
@_hasMissingDesignatedInitializers @objc(BMPDurationChangedEvent) @objcMembers final public class DurationChangedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let duration: Foundation.TimeInterval
  @objc convenience public init(duration: Foundation.TimeInterval)
  @objc required public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc override dynamic public init()
  @objc deinit
}
extension DurationChangedEvent : BitmovinPlayer.BMPJsonable {
  @objc final public class func fromJsonData(_ jsonData: [Swift.AnyHashable : Any]) throws -> Self
  @objc final public func toJsonString() throws -> Swift.String
}
@objc(_BMPConfigurationService) public protocol _ConfigurationService {
  @objc var licenseKey: Swift.String? { get }
  @objc var sdkVersion: Swift.String? { get }
  @objc var packageName: Swift.String? { get }
  @objc var maxTimeShiftThreshold: Foundation.TimeInterval { get }
  @objc var playerConfiguration: BitmovinPlayer.PlayerConfiguration { get }
  @objc var isCurrentSourceRestrictedToCache: Swift.Bool { get }
  @objc var suppressDefaultCaptionRendering: Swift.Bool { get }
  @objc(updatePlayerConfiguration:) func update(playerConfiguration: BitmovinPlayer.PlayerConfiguration)
  @available(*, deprecated)
  @objc(updateSourceConfiguration:) func update(sourceConfiguration: BitmovinPlayer.SourceConfiguration)
}
@objc(_BMPDefaultConfigurationService) final public class _DefaultConfigurationService : BitmovinPlayer._DefaultService, BitmovinPlayer._ConfigurationService, BitmovinPlayer._PlayerListenerInternal {
  @objc final public var licenseKey: Swift.String? {
    get
  }
  @objc final public var sdkVersion: Swift.String? {
    get
  }
  @objc final public var packageName: Swift.String? {
    get
  }
  @objc final public var maxTimeShiftThreshold: Foundation.TimeInterval {
    get
  }
  @objc final public var playerConfiguration: BitmovinPlayer.PlayerConfiguration {
    get
  }
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc final public var isCurrentSourceRestrictedToCache: Swift.Bool {
    @objc get
  }
  @objc final public var suppressDefaultCaptionRendering: Swift.Bool {
    @objc get
  }
  public init(playerEventEmitter: BitmovinPlayer._PlayerEventEmitter, appBundle: Foundation.Bundle, sdkBundle: Foundation.Bundle)
  @objc(initWithPlayerEventEmitter:) convenience public init(playerEventEmitter: BitmovinPlayer._PlayerEventEmitter)
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func update(playerConfiguration: BitmovinPlayer.PlayerConfiguration)
  @available(*, deprecated)
  @objc final public func update(sourceConfiguration: BitmovinPlayer.SourceConfiguration)
  @objc final public func onInternalActiveSourceChanged(_ event: BitmovinPlayer._InternalActiveSourceChangedEvent, player: BitmovinPlayer.Player)
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPPlaylistDecryptionKeyStoreStrategy) public protocol _PlaylistDecryptionKeyStoreStrategy : ObjectiveC.NSObjectProtocol {
  @objc func uri(for keyUrl: Swift.String, decryptionKeyData keyData: Foundation.Data) -> Swift.String?
}
@objcMembers @objc(_BMPImaAdLogEvent) public class _ImaAdLogEvent : ObjectiveC.NSObject {
  @objc final public let errorCode: Swift.Int
  @objc final public let errorMessage: Swift.String
  @objc final public let type: Swift.String
  @objc public init(errorCode: Swift.Int, errorMessage: Swift.String, type: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPRequestMetadata) @objcMembers final public class _RequestMetadata : ObjectiveC.NSObject {
  @objc final public var downloadType: Swift.String
  @objc final public let url: Foundation.URL
  @objc final public var redirectUrl: Foundation.URL?
  @objc final public var downloadTime: Foundation.TimeInterval
  @objc final public var httpStatus: Swift.Int
  @objc final public var size: Swift.Int
  @objc final public var wasSuccessful: Swift.Bool
  @objc final public var isLocalResource: Swift.Bool {
    @objc get
  }
  @objc public init(downloadType: Swift.String, url: Foundation.URL)
  @objc deinit
  @objc override dynamic public init()
}
@objc extension DownloadFinishedEvent {
  @objc convenience dynamic public init(requestMetadata: BitmovinPlayer._RequestMetadata)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPTimeShiftedEvent) final public class TimeShiftedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(BMPDownloadFinishedEvent) @objcMembers final public class DownloadFinishedEvent : ObjectiveC.NSObject, BitmovinPlayer.SourceEvent {
  @objc final public let name: Swift.String
  @objc final public let timestamp: Foundation.TimeInterval
  @objc final public let downloadType: Swift.String
  @objc final public let url: Foundation.URL
  @objc final public let lastRedirectLocation: Foundation.URL?
  @objc final public let downloadTime: Foundation.TimeInterval
  @objc final public let httpStatus: Swift.UInt
  @objc final public let size: Swift.UInt
  @objc final public var successful: Swift.Bool {
    @objc get
  }
  @objc final public let wasSuccessful: Swift.Bool
  @objc convenience public init(type: Swift.String, url: Foundation.URL, downloadTime: Foundation.TimeInterval, httpStatus: Swift.UInt, size: Swift.UInt, success: Swift.Bool, lastRedirectLocation: Foundation.URL?)
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDefaultVideoService) @objcMembers public class _DefaultVideoService : BitmovinPlayer._DefaultService, BitmovinPlayer._VideoService {
  @objc public var availableVideoQualities: [BitmovinPlayer.VideoQuality] {
    get
  }
  @objc public var videoQuality: BitmovinPlayer.VideoQuality? {
    @objc get
  }
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, player: BitmovinPlayer._BMPAVPlayer)
  @objc override dynamic public func start()
  @objc override dynamic public func stop()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultVideoService : BitmovinPlayer.PlayerListener, BitmovinPlayer._PlayerListenerInternal {
  @objc dynamic public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent, player: BitmovinPlayer.Player)
  @objc dynamic public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent, player: BitmovinPlayer.Player)
  @objc dynamic open func onMasterPlaylistLoaded(_ event: BitmovinPlayer._MasterPlaylistLoadedEvent, player: BitmovinPlayer.Player)
}
extension _DefaultVideoService : BitmovinPlayer._AVPlayerObserver {
  @objc dynamic public func player(_ player: BitmovinPlayer._BMPAVPlayer, didChangeCurrentItem oldItem: BitmovinPlayer._BMPAVPlayerItem?, newItem: BitmovinPlayer._BMPAVPlayerItem?)
}
extension _DefaultVideoService : BitmovinPlayer._AVPlayerItemListener {
  @objc dynamic public func playerItemDidReceiveNewAccessLogEntry(_ playerItem: BitmovinPlayer._BMPAVPlayerItem)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPBackgroundPlaybackLifecycleHandler) @objcMembers public class _BackgroundPlaybackLifecycleHandler : ObjectiveC.NSObject {
  @objc weak public var delegate: BitmovinPlayer._BackgroundPlaybackLifecycleHandlerDelegate?
  @objc override convenience dynamic public init()
  @objc deinit
}
@objc(_BMPBackgroundPlaybackLifecycleHandlerDelegate) public protocol _BackgroundPlaybackLifecycleHandlerDelegate {
  @objc func enteringBackground()
  @objc func exitingBackground()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPInternalPlayEvent) @objcMembers final public class _InternalPlayEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
extension BitmovinPlayer._LogLevel : Swift.Equatable {}
extension BitmovinPlayer._LogLevel : Swift.Hashable {}
extension BitmovinPlayer._LogLevel : Swift.RawRepresentable {}
extension BitmovinPlayer.SourceState : Swift.Equatable {}
extension BitmovinPlayer.SourceState : Swift.Hashable {}
extension BitmovinPlayer.SourceState : Swift.RawRepresentable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.Equatable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.Hashable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.RawRepresentable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.Equatable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.Hashable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.RawRepresentable {}

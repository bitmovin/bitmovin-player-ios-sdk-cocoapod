// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
// swift-module-flags: -target x86_64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BitmovinPlayer
import AVFoundation
@_exported import BitmovinPlayer
import Foundation
import Swift
import UIKit
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPUIDeviceVersionHelper) @objcMembers public class _UIDeviceVersionHelper : ObjectiveC.NSObject {
  @objc override convenience dynamic public init()
  @objc public func isSystemVersionGreaterThanOrEqual(_ versionToCheck: Swift.Double) -> Swift.Bool
  @objc public func isSystemVersionLessThan(_ versionToCheck: Swift.Double) -> Swift.Bool
  @objc deinit
}
@objcMembers @objc(_BMPShutterController) final public class _ShutterController : ObjectiveC.NSObject {
  @objc unowned final public var player: (BitmovinPlayer.PlayerAPI & BitmovinPlayer.PlayerEventHandler) {
    @objc get
    @objc set
  }
  @objc final public let shutterView: UIKit.UIView
  @objc public init(player: (BitmovinPlayer.PlayerAPI & BitmovinPlayer.PlayerEventHandler))
  @objc deinit
  @objc override dynamic public init()
}
extension _ShutterController : BitmovinPlayer._PlayerListenerInternal {
  @objc final public func onUnseen(_ unseenEvents: [BitmovinPlayer.PlayerEvent])
  @objc final public func onPlaying(_ event: BitmovinPlayer.PlayingEvent)
  @objc final public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent)
}
@objc(_BMPLogLevel) public enum _LogLevel : Swift.Int {
  case verbose = 0
  case info
  case debug
  case warning
  case error
  case none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPLogger) public protocol _Logger {
  @objc func log(_ message: Swift.String, level: BitmovinPlayer._LogLevel)
}
@objc(BMPUnstallingBehaviour) public enum UnstallingBehaviour : Swift.UInt {
  case relaxed = 0
  case aggressive = 1
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@_hasMissingDesignatedInitializers @objc(_BMPDefaultResourceLoaderService) @objcMembers final public class _DefaultResourceLoaderService : BitmovinPlayer._DefaultService, BitmovinPlayer._ResourceLoaderService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc convenience public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator)
  @objc final public func setupResourceLoaders(with sourceItem: BitmovinPlayer.SourceItem, asset: AVFoundation.AVURLAsset)
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultResourceLoaderService : AVFoundation.AVAssetResourceLoaderDelegate {
  @objc final public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForLoadingOfRequestedResource loadingRequest: AVFoundation.AVAssetResourceLoadingRequest) -> Swift.Bool
  @objc final public func resourceLoader(_ resourceLoader: AVFoundation.AVAssetResourceLoader, shouldWaitForRenewalOfRequestedResource renewalRequest: AVFoundation.AVAssetResourceRenewalRequest) -> Swift.Bool
}
extension _DefaultResourceLoaderService : BitmovinPlayer._FairplayHandlerDelegate {
  @objc final public func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, didFinishDRMLicenseRequestWith metadata: BitmovinPlayer._RequestMetadata)
  @objc final public func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, didFinishDRMCertificateRequestWith metadata: BitmovinPlayer._RequestMetadata)
  @objc final public func fairplayHandler(_ sender: BitmovinPlayer._FairplayHandler, didFinishWithError error: Swift.Error)
}
extension _DefaultResourceLoaderService : BitmovinPlayer._BitmovinResourceLoaderDelegate {
  @objc final public func bitmovinResourceLoader(_ sender: BitmovinPlayer._BitmovinResourceLoader, didFinishLoadingMasterPlaylistData masterData: Foundation.Data, requestMetadata: BitmovinPlayer._RequestMetadata)
  @objc final public func bitmovinResourceLoader(_ sender: BitmovinPlayer._BitmovinResourceLoader, didFinishLoadingVariantPlaylistData variantData: Foundation.Data, requestMetadata: BitmovinPlayer._RequestMetadata)
  @objc final public func bitmovinResourceLoader(_ sender: BitmovinPlayer._BitmovinResourceLoader, didFinishLoadingPlaylistWithError error: Swift.Error)
  @objc final public func bitmovinResourceLoader(_ sender: BitmovinPlayer._BitmovinResourceLoader, didFinishLoadingAesKeyData keyData: Foundation.Data, requestMetadata: BitmovinPlayer._RequestMetadata)
  @objc final public func bitmovinResourceLoader(_ sender: BitmovinPlayer._BitmovinResourceLoader, didFinishLoadingAesKeyWithError error: Swift.Error)
}
@_inheritsConvenienceInitializers @objc(_BMPGoogleCastBufferService) public class _GoogleCastBufferService : BitmovinPlayer._DefaultService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
}
extension _GoogleCastBufferService : BitmovinPlayer._BufferService {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPInternalBufferLevelChangedEvent) final public class _InternalBufferLevelChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let forwardBufferLevel: BitmovinPlayer.BufferLevel
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers final public class PictureInPictureExitedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSourceUnloadedEvent) final public class SourceUnloadedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPDefaultPlaylistManipulator) public class _DefaultPlaylistManipulator : ObjectiveC.NSObject, BitmovinPlayer._PlaylistManipulator {
  @objc public func replace(decryptionKeyUrl keyUrl: Swift.String, with keyData: Foundation.Data, in playlist: Swift.String, decryptionKeyStoreStrategy keyStoreStrategy: BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy) -> Swift.String
  @objc public func replace(manifestUrl url: Swift.String, with customUrl: Swift.String, in playlist: Swift.String) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(_BMPDefaultBufferService) public class _DefaultBufferService : BitmovinPlayer._DefaultService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, player: BitmovinPlayer._BMPAVPlayer)
  @objc override dynamic public func start()
  @objc override dynamic public func stop()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultBufferService : BitmovinPlayer._BufferService {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
extension _DefaultBufferService : BitmovinPlayer.PlayerListener {
  @objc dynamic public func onReady(_ event: BitmovinPlayer.ReadyEvent)
  @objc dynamic public func onConfigurationUpdated(_ event: BitmovinPlayer.ConfigurationUpdatedEvent)
  @objc dynamic public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent)
}
extension _DefaultBufferService : BitmovinPlayer._AVPlayerObserver {
  @objc dynamic public func player(_ player: BitmovinPlayer._BMPAVPlayer, didChangeCurrentItem oldItem: BitmovinPlayer._BMPAVPlayerItem?, newItem: BitmovinPlayer._BMPAVPlayerItem?)
}
extension _DefaultBufferService : BitmovinPlayer._AVPlayerItemListener {
  @objc dynamic public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, didChangeLoadedTimeRanges loadedTimeRanges: [Foundation.NSValue])
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPScalingModeChangedEvent) final public class ScalingModeChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let from: BitmovinPlayer.BMPScalingMode
  @objc final public let to: BitmovinPlayer.BMPScalingMode
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPVariantPlaylistLoadedEvent) @objcMembers final public class _VariantPlaylistLoadedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let data: Foundation.Data
  @objc final public let url: Foundation.URL
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(data: Foundation.Data, requestUrl: Foundation.URL)
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPCaptionHandler) public protocol _CaptionHandler {
  @objc weak var delegate: BitmovinPlayer._CaptionHandlerDelegate? { get set }
  @objc var availableSubtitleTracks: [BitmovinPlayer.SubtitleTrack] { get }
  @objc var activeSubtitleTrack: BitmovinPlayer.SubtitleTrack? { get }
  @objc var defaultSubtitleTrack: BitmovinPlayer.SubtitleTrack? { get }
  @objc(initializeSubtitleTracksWithSourceItem:) func initializeSubtitleTracks(with sourceItem: BitmovinPlayer.SourceItem)
  @objc func enableSubtitleTrack(byId subtitleTrackId: Swift.String?)
  @objc func disableActiveSubtitleTrack()
  @objc(addSubtitleTrack:) func add(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc func removeSubtitleTrack(byId subtitleTrackId: Swift.String)
  @objc(containsSubtitleTrack:) func contains(subtitleTrack: BitmovinPlayer.SubtitleTrack) -> Swift.Bool
  @objc func clearSubtitleTracks()
  @objc func forcedSubtitleTrack(forLanguage language: Swift.String) -> BitmovinPlayer.SubtitleTrack?
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPPlayEvent) @objcMembers final public class PlayEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc public class _BMPAVPlayer : AVFoundation.AVPlayer {
  @objc override dynamic public var currentItem: BitmovinPlayer._BMPAVPlayerItem? {
    @objc get
  }
  @objc override dynamic public init()
  @objc(addObserver:) public func add(observer: BitmovinPlayer._AVPlayerObserver)
  @objc(removeObserver:) public func remove(observer: BitmovinPlayer._AVPlayerObserver)
  @objc(seekToTime:toleranceBefore:toleranceAfter:suppressEvents:completionHandler:) public func seek(time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, suppressEvents: Swift.Bool, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, toleranceBefore: CoreMedia.CMTime, toleranceAfter: CoreMedia.CMTime, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func seek(to time: CoreMedia.CMTime, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc override dynamic public init(url URL: Foundation.URL)
  @objc override dynamic public init(playerItem item: AVFoundation.AVPlayerItem?)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPTweaksConfiguration) final public class TweaksConfiguration : BitmovinPlayer.Configuration {
  @objc final public var isNativeHlsParsingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var nativeHlsParsingEnabled: Swift.Bool
  @objc final public var isCustomHlsLoadingEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var customHlsLoadingEnabled: Swift.Bool
  @objc final public var timeChangedInterval: Foundation.TimeInterval
  @objc final public var disableSubtitleTracksWhileSeeking: Swift.Bool
  @objc final public var playbackStartBehaviour: BitmovinPlayer.PlaybackStartBehaviour
  @objc final public var unstallingBehaviour: BitmovinPlayer.UnstallingBehaviour
  @objc override dynamic public init()
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPStartOffsetCalculator) final public class _StartOffsetCalculator : ObjectiveC.NSObject {
  @objc(calculateStartOffsetForVoDWithSourceOptions:totalDuration:) public static func calculateStartOffsetForVoD(with sourceOptions: BitmovinPlayer.SourceOptions, totalDuration: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc(calculateStartOffsetForLiveWithSourceOptions:maxTimeShift:) public static func calculateStartOffsetForLive(with sourceOptions: BitmovinPlayer.SourceOptions, maxTimeShift: Foundation.TimeInterval) -> Foundation.TimeInterval
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers final public class PictureInPictureExitEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPBufferApiDelegate) public protocol _BufferApiDelegate {
  @objc(bufferAPI_getLevel:) func bufferAPI_getLevel(type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc(bufferAPI_setTargetLevel:) func bufferAPI_setTargetLevel(value: Foundation.TimeInterval)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPAVPlayerCaptionHandler) final public class _AVPlayerCaptionHandler : ObjectiveC.NSObject {
  @objc weak final public var delegate: BitmovinPlayer._CaptionHandlerDelegate?
  @objc final public var activeSubtitleTrack: BitmovinPlayer.SubtitleTrack? {
    get
  }
  @objc final public var availableSubtitleTracks: [BitmovinPlayer.SubtitleTrack] {
    get
  }
  @objc convenience public init(configurationService: BitmovinPlayer._ConfigurationService, player: BitmovinPlayer._BMPAVPlayer)
  @objc deinit
  @objc override dynamic public init()
}
extension _AVPlayerCaptionHandler : BitmovinPlayer._CaptionHandler {
  @objc final public var defaultSubtitleTrack: BitmovinPlayer.SubtitleTrack? {
    @objc get
  }
  @objc final public func initializeSubtitleTracks(with sourceItem: BitmovinPlayer.SourceItem)
  @objc final public func enableSubtitleTrack(byId subtitleTrackId: Swift.String?)
  @objc final public func disableActiveSubtitleTrack()
  @objc final public func add(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc final public func removeSubtitleTrack(byId subtitleTrackId: Swift.String)
  @objc final public func contains(subtitleTrack: BitmovinPlayer.SubtitleTrack) -> Swift.Bool
  @objc final public func clearSubtitleTracks()
  @objc final public func forcedSubtitleTrack(forLanguage language: Swift.String) -> BitmovinPlayer.SubtitleTrack?
}
extension _AVPlayerCaptionHandler : BitmovinPlayer._AVPlayerObserver {
  @objc final public func player(_ player: BitmovinPlayer._BMPAVPlayer, didChangeCurrentItem oldItem: BitmovinPlayer._BMPAVPlayerItem?, newItem: BitmovinPlayer._BMPAVPlayerItem?)
}
extension _AVPlayerCaptionHandler : BitmovinPlayer._AVPlayerItemListener {
  @objc final public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, willChangeMediaOptionFrom from: AVFoundation.AVMediaSelectionOption?, to: AVFoundation.AVMediaSelectionOption?, in mediaSelectionGroup: AVFoundation.AVMediaSelectionGroup)
  @objc final public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, didChangeMediaOptionFrom from: AVFoundation.AVMediaSelectionOption?, to: AVFoundation.AVMediaSelectionOption?, in mediaSelectionGroup: AVFoundation.AVMediaSelectionGroup)
  @objc final public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, willSeekToTargetTime seekTarget: CoreMedia.CMTime)
  @objc final public func playerItem(_ playerItem: BitmovinPlayer._BMPAVPlayerItem, didSeekWithSuccess finished: Swift.Bool)
}
@objc(_BMPResourceLoaderService) public protocol _ResourceLoaderService {
  @objc(setupResourceLoadersWithSourceItem:asset:) func setupResourceLoaders(with sourceItem: BitmovinPlayer.SourceItem, asset: AVFoundation.AVURLAsset)
}
@objc(_BMPInitializationService) public protocol _InitializationService : BitmovinPlayer._Service {
  @objc var selectedStreamType: BitmovinPlayer.BMPMediaSourceType { get }
  @objc(setup:) func setup(playerConfig: BitmovinPlayer.PlayerConfiguration)
  @objc(loadSourceItem:) func load(sourceItem: BitmovinPlayer.SourceItem)
  @objc func unload()
}
@objc(BMPPlaybackStartBehaviour) public enum PlaybackStartBehaviour : Swift.UInt {
  case relaxed = 0
  case aggressive = 1
  public typealias RawValue = Swift.UInt
  public init?(rawValue: Swift.UInt)
  public var rawValue: Swift.UInt {
    get
  }
}
@objc(_BMPVideoService) public protocol _VideoService {
  @objc var availableVideoQualities: [BitmovinPlayer.VideoQuality] { get }
  @objc var videoQuality: BitmovinPlayer.VideoQuality? { get }
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSourceWillUnloadEvent) final public class SourceWillUnloadEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPEventEmitter) public protocol _EventEmitter : BitmovinPlayer.PlayerEventHandler, BitmovinPlayer._Service {
  @objc(emitEvent:) func emit(event: BitmovinPlayer.PlayerEvent)
}
@objc(_BMPBufferService) public protocol _BufferService : BitmovinPlayer.BufferApi, BitmovinPlayer._Service {
}
@objcMembers @objc(BMPSourceLoadedEvent) final public class SourceLoadedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let sourceItem: BitmovinPlayer.SourceItem
  @objc final public let streamType: BitmovinPlayer.BMPMediaSourceType
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(sourceItem: BitmovinPlayer.SourceItem, streamType: BitmovinPlayer.BMPMediaSourceType)
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultUrlAssetValuesLoader) @objcMembers public class _DefaultUrlAssetValuesLoader : ObjectiveC.NSObject {
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultUrlAssetValuesLoader {
  @objc(loadValuesAsynchronouslyForAsset:onComplete:) dynamic public func loadValuesAsynchronously(for asset: AVFoundation.AVURLAsset, onComplete: ((AVFoundation.AVURLAsset, Swift.Bool, Swift.Bool) -> Swift.Void)?)
  @objc(triggerContentKeyRequestForAsset:) dynamic public func triggerContentKeyRequest(for asset: AVFoundation.AVURLAsset)
}
@objc(_BMPAVPlayerViewControllerListener) public protocol _AVPlayerViewControllerListener : AnyObject {
  @objc optional func playerViewControllerWillStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewControllerDidStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewControllerWillStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewControllerDidStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewControllerFailedToStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc optional func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, willTransitionToVisibilityOfTransportBar visible: Swift.Bool)
  @objc optional func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, didChangeVideoGravity oldVideoGravity: AVFoundation.AVLayerVideoGravity, newVideoGravity: AVFoundation.AVLayerVideoGravity)
}
@objc(_BMPDefaultViewHierarchyHandler) @objcMembers public class _DefaultViewHierarchyHandler : ObjectiveC.NSObject, BitmovinPlayer._ViewHierarchyHandler {
  @objc weak public var shutterView: UIKit.UIView?
  @objc weak public var posterView: UIKit.UIView?
  @objc weak public var playerView: UIKit.UIView?
  @objc public init(parentView: UIKit.UIView)
  @objc public func handleSubViewOrdering()
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPScalingModeService) public protocol _ScalingModeService : AnyObject {
  @objc var scalingMode: BitmovinPlayer.BMPScalingMode { get set }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPAudioAddedEvent) @objcMembers final public class AudioAddedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let audioTrack: BitmovinPlayer.AudioTrack
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(audioTrack: BitmovinPlayer.AudioTrack, time: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objcMembers @objc(_BMPInitialTimeShiftContext) final public class _InitialTimeShiftContext : ObjectiveC.NSObject {
  @objc final public let initialTimestamp: Foundation.TimeInterval
  @objc final public let initialLiveEdge: Foundation.TimeInterval
  @objc public init(initialTimestamp: Foundation.TimeInterval, initialLiveEdge: Foundation.TimeInterval)
  @objc deinit
  @objc override dynamic public init()
}
@objcMembers @objc(_BMPPlayerBufferApi) public class _PlayerBufferApi : ObjectiveC.NSObject {
  @objc public init(delegate: BitmovinPlayer._BufferApiDelegate)
  @objc deinit
  @objc override dynamic public init()
}
extension _PlayerBufferApi : BitmovinPlayer.BufferApi {
  @objc dynamic public func getLevel(_ type: BitmovinPlayer.BufferType) -> BitmovinPlayer.BufferLevel
  @objc dynamic public func setTargetLevel(_ value: Foundation.TimeInterval)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPSeekedEvent) final public class SeekedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPDeficiencyService) public protocol _DeficiencyService {
  @objc(throwError:) func throwError(code: Swift.Int)
  @objc func throwError(code: Swift.Int, message: Swift.String)
  @objc(throwError:replacements:) func throwError(code: Swift.Int, replacements: [Swift.String]?)
  @objc func throwLicensingErrorNoKey()
  @objc func throwLicensingErrorInvalidDomain()
  @objc func throwManifestNotFoundError(withReason reason: Swift.String?)
  @objc func throwSourceError()
  @objc(throwSourceError:) func throwSourceError(reason: Swift.String?)
  @objc(throwWarning:) func throwWarning(code: Swift.Int)
  @objc(throwWarning:replacements:) func throwWarning(code: Swift.Int, replacements: [Swift.String]?)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStyleConfiguration) final public class StyleConfiguration : BitmovinPlayer.Configuration {
  @objc final public var isUiEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var uiEnabled: Swift.Bool
  @objc final public var userInterfaceType: BitmovinPlayer.BMPUserInterfaceType
  @objc @available(tvOS, unavailable)
  final public var playerUiCss: Foundation.URL
  @objc @available(tvOS, unavailable)
  final public var supplementalPlayerUiCss: Foundation.URL?
  @objc @available(tvOS, unavailable)
  final public var playerUiJs: Foundation.URL
  @objc final public var scalingMode: BitmovinPlayer.BMPScalingMode
  @objc final public var userInterfaceConfiguration: BitmovinPlayer.UserInterfaceConfiguration?
  @objc override dynamic public init()
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
public protocol _HexConvertible {
  var hexadecimal: Foundation.Data? { get }
  var normalizedHexString: Swift.String { get }
}
@_inheritsConvenienceInitializers @objc(BMPDestroyEvent) final public class DestroyEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPCafDrmConfigConvertible) public protocol _CafDrmConfigConvertible {
  @objc func toCafDrmConfig(remoteControlConfig: BitmovinPlayer.RemoteControlConfiguration) -> BitmovinPlayer._CafDrmConfig?
}
extension WidevineConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig(remoteControlConfig: BitmovinPlayer.RemoteControlConfiguration) -> BitmovinPlayer._CafDrmConfig?
}
extension ClearKeyConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig(remoteControlConfig: BitmovinPlayer.RemoteControlConfiguration) -> BitmovinPlayer._CafDrmConfig?
}
extension PlayReadyConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig(remoteControlConfig: BitmovinPlayer.RemoteControlConfiguration) -> BitmovinPlayer._CafDrmConfig?
}
@objc(_BMPAVPlayerViewControllerProxy) @objcMembers public class _AVPlayerViewControllerProxy : ObjectiveC.NSObject {
  @objc final public let avPlayerViewController: AVKit.AVPlayerViewController
  @objc public init(avPlayerViewController: AVKit.AVPlayerViewController)
  @objc override dynamic public func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc(addListener:) public func add(listener: BitmovinPlayer._AVPlayerViewControllerListener)
  @objc(removeListener:) public func remove(listener: BitmovinPlayer._AVPlayerViewControllerListener)
  @objc deinit
  @objc override dynamic public init()
}
extension _AVPlayerViewControllerProxy {
  @objc dynamic public var videoGravity: AVFoundation.AVLayerVideoGravity {
    @objc get
    @objc set
  }
  @objc dynamic public var view: UIKit.UIView {
    @objc get
    @objc set
  }
  @objc dynamic public var showsPlaybackControls: Swift.Bool {
    @objc get
    @objc set
  }
  @objc(willMoveToParentViewController:) dynamic public func willMove(toParent parent: UIKit.UIViewController?)
  @objc(removeFromParentViewController) dynamic public func removeFromParent()
  @objc(didMoveToParentViewController:) dynamic public func didMove(toParent parent: UIKit.UIViewController?)
}
extension _AVPlayerViewControllerProxy : AVKit.AVPlayerViewControllerDelegate {
  @objc dynamic public func playerViewControllerWillStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc dynamic public func playerViewControllerDidStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc dynamic public func playerViewControllerWillStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc dynamic public func playerViewControllerDidStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc dynamic public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, failedToStartPictureInPictureWithError error: Swift.Error)
}
@objc(_BMPPictureInPictureService) public protocol _PictureInPictureService : AnyObject {
  @objc var isPictureInPicture: Swift.Bool { get }
  @objc func enterPictureInPicture()
  @objc func exitPictureInPicture()
}
@_hasMissingDesignatedInitializers @objcMembers @objc(BMPBufferLevel) public class BufferLevel : ObjectiveC.NSObject {
  @objc final public let level: Foundation.TimeInterval
  @objc final public let targetLevel: Foundation.TimeInterval
  @objc final public let media: BitmovinPlayer.MediaType
  @objc final public let type: BitmovinPlayer.BufferType
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(_BMPTimeShiftStatus) final public class _TimeShiftStatus : ObjectiveC.NSObject {
  @objc final public let lastTimeShiftOffset: Foundation.TimeInterval
  @objc final public let lastTimeShiftReachedTime: Foundation.TimeInterval
  @objc final public let lastTimeShiftDate: Foundation.Date
  @objc public init(lastTimeShiftOffset: Foundation.TimeInterval, lastTimeShiftReachedTime: Foundation.TimeInterval, lastTimeShiftDate: Foundation.Date)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPLiveConfiguration) final public class LiveConfiguration : BitmovinPlayer.Configuration {
  @objc final public var minTimeshiftBufferDepth: Foundation.TimeInterval
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPViewHierarchyHandler) public protocol _ViewHierarchyHandler : AnyObject {
  @objc var shutterView: UIKit.UIView? { get set }
  @objc var posterView: UIKit.UIView? { get set }
  @objc var playerView: UIKit.UIView? { get set }
  @objc func handleSubViewOrdering()
}
@objc @_inheritsConvenienceInitializers final public class PictureInPictureEnteredEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPMasterPlaylistLoadedEvent) @objcMembers final public class _MasterPlaylistLoadedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let data: Foundation.Data
  @objc final public let url: Foundation.URL
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(data: Foundation.Data, requestUrl: Foundation.URL)
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@objcMembers @objc(BMPTimeShiftEvent) final public class TimeShiftEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let position: Foundation.TimeInterval
  @objc final public let target: Foundation.TimeInterval
  @objc final public let timeShift: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPBitmovinLogger) public class _BitmovinLogger : ObjectiveC.NSObject, BitmovinPlayer._Logger {
  @objc public init(level: BitmovinPlayer._LogLevel)
  @objc override convenience dynamic public init()
  @objc public func log(_ message: Swift.String, level: BitmovinPlayer._LogLevel)
  @objc deinit
}
@objcMembers @objc(BMPSeekEvent) final public class SeekEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let seekTarget: Foundation.TimeInterval
  @objc final public let position: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, seekTarget: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objcMembers @objc(_BMPInternalTimeShiftEvent) final public class _InternalTimeShiftEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let position: Foundation.TimeInterval
  @objc final public let target: Foundation.TimeInterval
  @objc final public let timeShift: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(position: Foundation.TimeInterval, target: Foundation.TimeInterval, timeShift: Foundation.TimeInterval)
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(_BMPInlinePlaylistDecryptionKeyStoreStrategy) public class _InlinePlaylistDecryptionKeyStoreStrategy : ObjectiveC.NSObject, BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy {
  @objc public func uri(for keyUrl: Swift.String, decryptionKeyData keyData: Foundation.Data) -> Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultEventEmitter) public class _DefaultEventEmitter : BitmovinPlayer._DefaultService, BitmovinPlayer._EventEmitter {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc override dynamic public init()
  @objc public func emit(event: BitmovinPlayer.PlayerEvent)
  @objc deinit
}
extension _DefaultEventEmitter : BitmovinPlayer.PlayerEventHandler {
  @objc dynamic public func add(listener: BitmovinPlayer.PlayerListener)
  @objc dynamic public func remove(listener: BitmovinPlayer.PlayerListener)
}
@objcMembers @objc(_BMPSystemUiScalingModeService) public class _SystemUiScalingModeService : ObjectiveC.NSObject {
  @objc public init(avPlayerViewControllerProxy: BitmovinPlayer._AVPlayerViewControllerProxy, uiEventEmitter: BitmovinPlayer.UserInterfaceListener)
  @objc deinit
  @objc override dynamic public init()
}
extension _SystemUiScalingModeService : BitmovinPlayer._ScalingModeService {
  @objc dynamic public var scalingMode: BitmovinPlayer.BMPScalingMode {
    @objc get
    @objc set
  }
}
extension _SystemUiScalingModeService : BitmovinPlayer._AVPlayerViewControllerListener {
  @objc dynamic public func playerViewController(_ playerViewController: AVKit.AVPlayerViewController, didChangeVideoGravity oldVideoGravity: AVFoundation.AVLayerVideoGravity, newVideoGravity: AVFoundation.AVLayerVideoGravity)
}
@objc(_BMPDefaultAudioService) @objcMembers final public class _DefaultAudioService : BitmovinPlayer._DefaultService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, player: BitmovinPlayer._BMPAVPlayer)
  @objc override final public func start()
  @objc override final public func stop()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultAudioService : BitmovinPlayer._AudioService {
  @objc final public var availableAudio: [BitmovinPlayer.AudioTrack] {
    @objc get
  }
  @objc final public var audio: BitmovinPlayer.AudioTrack? {
    @objc get
  }
  @objc final public func setAudioWithIdentifier(_ audioTrackID: Swift.String)
}
extension _DefaultAudioService : BitmovinPlayer._PlayerListenerInternal {
  @objc final public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent)
  @objc final public func onInternalReady(_ event: BitmovinPlayer._InternalReadyEvent)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPDefaultInitializationService) public class _DefaultInitializationService : BitmovinPlayer._DefaultService, BitmovinPlayer._InitializationService {
  @objc public var selectedStreamType: BitmovinPlayer.BMPMediaSourceType {
    get
  }
  @objc convenience public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, player: BitmovinPlayer._BMPAVPlayer)
  @objc public func setup(playerConfig: BitmovinPlayer.PlayerConfiguration)
  @objc public func load(sourceItem: BitmovinPlayer.SourceItem)
  @objc public func unload()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultInitializationService {
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc override dynamic public func start()
  @objc override dynamic public func stop()
}
@_inheritsConvenienceInitializers @objc(BMPReadyEvent) final public class ReadyEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(BMPPlaybackFinishedEvent) @objcMembers final public class PlaybackFinishedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
}
@objc(_BMPPlaylistManipulator) public protocol _PlaylistManipulator : AnyObject {
  @objc func replace(decryptionKeyUrl keyUrl: Swift.String, with keyData: Foundation.Data, in playlist: Swift.String, decryptionKeyStoreStrategy keyStoreStrategy: BitmovinPlayer._PlaylistDecryptionKeyStoreStrategy) -> Swift.String
  @objc(replaceManifestUrl:withCustomUrl:in:) func replace(manifestUrl url: Swift.String, with customUrl: Swift.String, in playlist: Swift.String) -> Swift.String
}
@_inheritsConvenienceInitializers @objc(_BMPInternalTimeShiftedEvent) final public class _InternalTimeShiftedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objcMembers @objc(_BMPDefaultDeficiencyService) final public class _DefaultDeficiencyService : BitmovinPlayer._DefaultService, BitmovinPlayer._DeficiencyService {
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator)
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func throwError(code: Swift.Int)
  @objc final public func throwError(code: Swift.Int, message: Swift.String)
  @objc final public func throwError(code: Swift.Int, replacements: [Swift.String]?)
  @objc final public func throwLicensingErrorNoKey()
  @objc final public func throwLicensingErrorInvalidDomain()
  @objc final public func throwManifestNotFoundError(withReason reason: Swift.String?)
  @objc final public func throwSourceError()
  @objc final public func throwSourceError(reason: Swift.String?)
  @objc final public func throwWarning(code: Swift.Int)
  @objc final public func throwWarning(code: Swift.Int, replacements: [Swift.String]?)
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPSystemUiPictureInPictureService) @objcMembers public class _SystemUiPictureInPictureService : ObjectiveC.NSObject, BitmovinPlayer._PictureInPictureService {
  @objc public var isPictureInPicture: Swift.Bool {
    get
  }
  @objc public init(avPlayerViewControllerProxy: BitmovinPlayer._AVPlayerViewControllerProxy, uiEventEmitter: BitmovinPlayer.UserInterfaceListener, logger: BitmovinPlayer._Logger)
  @objc public func enterPictureInPicture()
  @objc public func exitPictureInPicture()
  @objc deinit
  @objc override dynamic public init()
}
extension _SystemUiPictureInPictureService : BitmovinPlayer._AVPlayerViewControllerListener {
  @objc dynamic public func playerViewControllerWillStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc dynamic public func playerViewControllerDidStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc dynamic public func playerViewControllerWillStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc dynamic public func playerViewControllerDidStopPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
  @objc dynamic public func playerViewControllerFailedToStartPictureInPicture(_ playerViewController: AVKit.AVPlayerViewController)
}
@_hasMissingDesignatedInitializers @objcMembers @objc(_BMPExternalCaptionHandler) final public class _ExternalCaptionHandler : ObjectiveC.NSObject {
  @objc weak final public var delegate: BitmovinPlayer._CaptionHandlerDelegate?
  @objc final public var activeSubtitleTrack: BitmovinPlayer.SubtitleTrack? {
    get
  }
  @objc final public var availableSubtitleTracks: [BitmovinPlayer.SubtitleTrack] {
    get
  }
  @objc convenience public init(configurationService: BitmovinPlayer._ConfigurationService, deficiencyService: BitmovinPlayer._DeficiencyService, eventEmitter: BitmovinPlayer._EventEmitter)
  @objc deinit
  @objc override dynamic public init()
}
extension _ExternalCaptionHandler : BitmovinPlayer._CaptionHandler {
  @objc final public var defaultSubtitleTrack: BitmovinPlayer.SubtitleTrack? {
    @objc get
  }
  @objc final public func initializeSubtitleTracks(with sourceItem: BitmovinPlayer.SourceItem)
  @objc final public func enableSubtitleTrack(byId subtitleTrackId: Swift.String?)
  @objc final public func disableActiveSubtitleTrack()
  @objc final public func add(subtitleTrack: BitmovinPlayer.SubtitleTrack)
  @objc final public func removeSubtitleTrack(byId subtitleTrackId: Swift.String)
  @objc final public func contains(subtitleTrack: BitmovinPlayer.SubtitleTrack) -> Swift.Bool
  @objc final public func clearSubtitleTracks()
  @objc final public func forcedSubtitleTrack(forLanguage language: Swift.String) -> BitmovinPlayer.SubtitleTrack?
}
@objc(_BMPDefaultPictureInPictureService) @objcMembers public class _DefaultPictureInPictureService : ObjectiveC.NSObject, BitmovinPlayer._PictureInPictureService {
  @objc public var isPictureInPicture: Swift.Bool {
    @objc get
  }
  @objc public init(pictureInPictureController: AVKit.AVPictureInPictureController, uiEventEmitter: BitmovinPlayer.UserInterfaceListener)
  @objc public func enterPictureInPicture()
  @objc public func exitPictureInPicture()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultPictureInPictureService : AVKit.AVPictureInPictureControllerDelegate {
  @objc dynamic public func pictureInPictureControllerWillStartPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc dynamic public func pictureInPictureControllerDidStartPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc dynamic public func pictureInPictureControllerWillStopPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
  @objc dynamic public func pictureInPictureControllerDidStopPictureInPicture(_ pictureInPictureController: AVKit.AVPictureInPictureController)
}
@objc @_inheritsConvenienceInitializers final public class PictureInPictureEnterEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDefaultScalingModeService) @objcMembers public class _DefaultScalingModeService : ObjectiveC.NSObject {
  @objc public init(avPlayerLayer: AVFoundation.AVPlayerLayer, uiEventEmitter: BitmovinPlayer.UserInterfaceListener)
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultScalingModeService : BitmovinPlayer._ScalingModeService {
  @objc dynamic public var scalingMode: BitmovinPlayer.BMPScalingMode {
    @objc get
    @objc set
  }
}
@objc(_BMPCafDrmConfig) @objcMembers final public class _CafDrmConfig : ObjectiveC.NSObject {
  public enum ProtectionSystem : Swift.String {
    case widevine
    case playReady
    case clearKey
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public init(protectionSystem: BitmovinPlayer._CafDrmConfig.ProtectionSystem, licenseUrl: Foundation.URL, headers: [Swift.String : Swift.String]?, withCredentials: Swift.Bool)
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPMediaInfoCustomData) @objcMembers final public class _MediaInfoCustomData : ObjectiveC.NSObject {
  @objc public init(drm: BitmovinPlayer._CafDrmConfig?, metadata: [Swift.String : Swift.String]?, options: BitmovinPlayer._CafSourceOptions)
  @objc final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
extension String : BitmovinPlayer._HexConvertible {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
extension NSString : BitmovinPlayer._HexConvertible {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
@objc(_BMPMetadataMessage) @objcMembers final public class _MetadataMessage : ObjectiveC.NSObject {
  @objc public init(receiverVersion: BitmovinPlayer.GoogleCastReceiverVersion, data: [Swift.AnyHashable : Any])
  @objc final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(BMPDrmDataParsedEvent) @objcMembers final public class DrmDataParsedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let data: BitmovinPlayer.DrmData
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(data: BitmovinPlayer.DrmData)
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
}
@objc(BMPDrmData) @objcMembers final public class DrmData : ObjectiveC.NSObject {
  @objc(BMPDrmDataType) public enum DrmDataType : Swift.Int {
    case skdUri
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let data: Foundation.Data
  @objc final public let type: BitmovinPlayer.DrmData.DrmDataType
  @objc public init(data: Foundation.Data, type: BitmovinPlayer.DrmData.DrmDataType)
  @objc convenience public init?(skdUri: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(BMPDrmRequest) @objcMembers final public class DrmRequest : BitmovinPlayer.HttpRequest {
  @objc final public let drmData: BitmovinPlayer.DrmData
  @objc deinit
  @objc override dynamic public init(url: Foundation.URL, method: Swift.String)
}
@objc extension NSURLRequest {
  @objc dynamic public func _toBitmovinHttpRequest() -> BitmovinPlayer.HttpRequest?
  @objc dynamic public func _toBitmovinDrmRequest(skdUri: Swift.String) -> BitmovinPlayer.DrmRequest?
}
@_hasMissingDesignatedInitializers @objc(BMPDurationChangedEvent) @objcMembers final public class DurationChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let duration: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(duration: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPConfigurationService) public protocol _ConfigurationService {
  @objc var licenseKey: Swift.String? { get }
  @objc var sdkVersion: Swift.String? { get }
  @objc var packageName: Swift.String? { get }
  @objc var playerConfiguration: BitmovinPlayer.PlayerConfiguration { get }
  @objc var isCurrentSourceRestrictedToCache: Swift.Bool { get }
  @objc var suppressDefaultCaptionRendering: Swift.Bool { get }
  @objc(updatePlayerConfiguration:) func update(playerConfiguration: BitmovinPlayer.PlayerConfiguration)
  @available(*, deprecated)
  @objc(updateSourceConfiguration:) func update(sourceConfiguration: BitmovinPlayer.SourceConfiguration)
}
@objc(_BMPDefaultConfigurationService) final public class _DefaultConfigurationService : BitmovinPlayer._DefaultService, BitmovinPlayer._ConfigurationService, BitmovinPlayer.PlayerListener {
  @objc final public var licenseKey: Swift.String? {
    get
  }
  @objc final public var sdkVersion: Swift.String? {
    get
  }
  @objc final public var packageName: Swift.String? {
    get
  }
  @objc final public var playerConfiguration: BitmovinPlayer.PlayerConfiguration {
    get
  }
  @objc override final public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc final public var isCurrentSourceRestrictedToCache: Swift.Bool {
    @objc get
  }
  @objc final public var suppressDefaultCaptionRendering: Swift.Bool {
    @objc get
  }
  public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, appBundle: Foundation.Bundle, sdkBundle: Foundation.Bundle)
  @objc(initWithServiceLocator:) convenience public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator)
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func update(playerConfiguration: BitmovinPlayer.PlayerConfiguration)
  @available(*, deprecated)
  @objc final public func update(sourceConfiguration: BitmovinPlayer.SourceConfiguration)
  @objc final public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent)
  @objc final public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent)
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPPlaylistDecryptionKeyStoreStrategy) public protocol _PlaylistDecryptionKeyStoreStrategy : ObjectiveC.NSObjectProtocol {
  @objc func uri(for keyUrl: Swift.String, decryptionKeyData keyData: Foundation.Data) -> Swift.String?
}
@objcMembers @objc(_BMPImaAdLogEvent) public class _ImaAdLogEvent : ObjectiveC.NSObject {
  @objc final public let errorCode: Swift.Int
  @objc final public let errorMessage: Swift.String
  @objc final public let type: Swift.String
  @objc public init(errorCode: Swift.Int, errorMessage: Swift.String, type: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPRequestMetadata) @objcMembers final public class _RequestMetadata : ObjectiveC.NSObject {
  @objc final public var downloadType: Swift.String
  @objc final public let url: Foundation.URL
  @objc final public var redirectUrl: Foundation.URL?
  @objc final public var downloadTime: Foundation.TimeInterval
  @objc final public var httpStatus: Swift.Int
  @objc final public var size: Swift.Int
  @objc final public var wasSuccessful: Swift.Bool
  @objc final public var isLocalResource: Swift.Bool {
    @objc get
  }
  @objc public init(downloadType: Swift.String, url: Foundation.URL)
  @objc deinit
  @objc override dynamic public init()
}
@objc extension DownloadFinishedEvent {
  @objc convenience dynamic public init(requestMetadata: BitmovinPlayer._RequestMetadata)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPTimeShiftedEvent) final public class TimeShiftedEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(BMPDownloadFinishedEvent) @objcMembers final public class DownloadFinishedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let downloadType: Swift.String
  @objc final public let url: Foundation.URL
  @objc final public let lastRedirectLocation: Foundation.URL?
  @objc final public let downloadTime: Foundation.TimeInterval
  @objc final public let httpStatus: Swift.UInt
  @objc final public let size: Swift.UInt
  @objc final public var successful: Swift.Bool {
    @objc get
  }
  @objc final public let wasSuccessful: Swift.Bool
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(type: Swift.String, url: Foundation.URL, downloadTime: Foundation.TimeInterval, httpStatus: Swift.UInt, size: Swift.UInt, success: Swift.Bool, lastRedirectLocation: Foundation.URL?)
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc(_BMPDefaultVideoService) @objcMembers public class _DefaultVideoService : BitmovinPlayer._DefaultService, BitmovinPlayer._VideoService {
  @objc public var availableVideoQualities: [BitmovinPlayer.VideoQuality] {
    get
  }
  @objc public var videoQuality: BitmovinPlayer.VideoQuality? {
    @objc get
  }
  @objc override dynamic public var type: BitmovinPlayer._ServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, player: BitmovinPlayer._BMPAVPlayer)
  @objc override dynamic public func start()
  @objc override dynamic public func stop()
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultVideoService : BitmovinPlayer.PlayerListener, BitmovinPlayer._PlayerListenerInternal {
  @objc dynamic public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent)
  @objc dynamic public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent)
  @objc dynamic open func onMasterPlaylistLoaded(_ event: BitmovinPlayer._MasterPlaylistLoadedEvent)
}
extension _DefaultVideoService : BitmovinPlayer._AVPlayerObserver {
  @objc dynamic public func player(_ player: BitmovinPlayer._BMPAVPlayer, didChangeCurrentItem oldItem: BitmovinPlayer._BMPAVPlayerItem?, newItem: BitmovinPlayer._BMPAVPlayerItem?)
}
extension _DefaultVideoService : BitmovinPlayer._AVPlayerItemListener {
  @objc dynamic public func playerItemDidReceiveNewAccessLogEntry(_ playerItem: BitmovinPlayer._BMPAVPlayerItem)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPBackgroundPlaybackLifecycleHandler) @objcMembers public class _BackgroundPlaybackLifecycleHandler : ObjectiveC.NSObject {
  @objc weak public var delegate: BitmovinPlayer._BackgroundPlaybackLifecycleHandlerDelegate?
  @objc override convenience dynamic public init()
  @objc deinit
}
@objc(_BMPBackgroundPlaybackLifecycleHandlerDelegate) public protocol _BackgroundPlaybackLifecycleHandlerDelegate {
  @objc func enteringBackground()
  @objc func exitingBackground()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(_BMPInternalPlayEvent) @objcMembers final public class _InternalPlayEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(_BMPInternalCastReadyEvent) final public class _InternalCastReadyEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@objc(_BMPCafSourceOptions) @objcMembers final public class _CafSourceOptions : ObjectiveC.NSObject {
  @objc public init(sendManifestRequestsWithCredentials: Swift.Bool, sendSegmentRequestsWithCredentials: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPAutoPlayHandler) public protocol _AutoPlayHandler : AnyObject {
}
@objc(_BMPDefaultAutoPlayHandler) @objcMembers final public class _DefaultAutoPlayHandler : ObjectiveC.NSObject, BitmovinPlayer._AutoPlayHandler {
  @objc public init(player: BitmovinPlayer.PlayerAPI, eventHandler: BitmovinPlayer.PlayerEventHandler, remoteControl: BitmovinPlayer.BMPRemoteControlAPI, configurationService: BitmovinPlayer._ConfigurationService, playbackStartBehaviour: BitmovinPlayer.PlaybackStartBehaviour)
  @objc deinit
  @objc override dynamic public init()
}
extension _DefaultAutoPlayHandler : BitmovinPlayer._PlayerListenerInternal {
  @objc final public func onInternalReady(_ event: BitmovinPlayer._InternalReadyEvent)
  @objc final public func onInternalBufferLevelChanged(_ event: BitmovinPlayer._InternalBufferLevelChangedEvent)
  @objc final public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent)
}
extension BitmovinPlayer._LogLevel : Swift.Equatable {}
extension BitmovinPlayer._LogLevel : Swift.Hashable {}
extension BitmovinPlayer._LogLevel : Swift.RawRepresentable {}
extension BitmovinPlayer.UnstallingBehaviour : Swift.Equatable {}
extension BitmovinPlayer.UnstallingBehaviour : Swift.Hashable {}
extension BitmovinPlayer.UnstallingBehaviour : Swift.RawRepresentable {}
extension BitmovinPlayer.PlaybackStartBehaviour : Swift.Equatable {}
extension BitmovinPlayer.PlaybackStartBehaviour : Swift.Hashable {}
extension BitmovinPlayer.PlaybackStartBehaviour : Swift.RawRepresentable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.Equatable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.Hashable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.RawRepresentable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.Equatable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.Hashable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.RawRepresentable {}

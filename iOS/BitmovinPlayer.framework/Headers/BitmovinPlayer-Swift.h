#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The seek target time interval in seconds.
@property (nonatomic, readonly) NSTimeInterval seekTarget;
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position seekTarget:(NSTimeInterval)seekTarget OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfiguration#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPAVPlayerItem;
@protocol _BMPAVPlayerObserver;
@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVPlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPPlayerConfiguration;
@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// The threshold value for TimeService.getMaxTimeShift.
/// When the internal value for the maximal possible timeshift is lower than this threshold, timeshifting should be
/// disabled. That means TimeService.getMaxTimeShift returns 0 in that case.
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPSourceUnloadedEvent;

@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setupAudioTracks;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end


SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onReady:(BMPReadyEvent * _Nonnull)event;
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end

@class BMPSourceLoadedEvent;

SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <BMPPlayerListener, _BMPConfigurationService>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_EventEmitter")
@protocol _BMPEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end

@class BMPSourceItem;

SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
- (void)start;
- (void)stop;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end


SWIFT_CLASS_NAMED("_DefaultResourceLoaderService")
@interface _BMPDefaultResourceLoaderService : _BMPDefaultService <_BMPResourceLoaderService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;
@class AVAssetResourceRenewalRequest;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPFairplayHandler;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPFairplayHandlerDelegate>
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishWithError:(NSError * _Nonnull)error;
@end

@class _BMPBitmovinResourceLoader;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBitmovinResourceLoaderDelegate>
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingMasterPlaylistData:(NSData * _Nonnull)masterData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingVariantPlaylistData:(NSData * _Nonnull)variantData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingPlaylistWithError:(NSError * _Nonnull)error;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyData:(NSData * _Nonnull)keyData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyWithError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event;
@end




SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end




SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The seek target time interval in seconds.
@property (nonatomic, readonly) NSTimeInterval seekTarget;
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position seekTarget:(NSTimeInterval)seekTarget OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfiguration#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPAVPlayerItem;
@protocol _BMPAVPlayerObserver;
@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVPlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPPlayerConfiguration;
@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// The threshold value for TimeService.getMaxTimeShift.
/// When the internal value for the maximal possible timeshift is lower than this threshold, timeshifting should be
/// disabled. That means TimeService.getMaxTimeShift returns 0 in that case.
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPSourceUnloadedEvent;

@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setupAudioTracks;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end


SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onReady:(BMPReadyEvent * _Nonnull)event;
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end

@class BMPSourceLoadedEvent;

SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <BMPPlayerListener, _BMPConfigurationService>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_EventEmitter")
@protocol _BMPEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end

@class BMPSourceItem;

SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
- (void)start;
- (void)stop;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end


SWIFT_CLASS_NAMED("_DefaultResourceLoaderService")
@interface _BMPDefaultResourceLoaderService : _BMPDefaultService <_BMPResourceLoaderService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;
@class AVAssetResourceRenewalRequest;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPFairplayHandler;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPFairplayHandlerDelegate>
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishWithError:(NSError * _Nonnull)error;
@end

@class _BMPBitmovinResourceLoader;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBitmovinResourceLoaderDelegate>
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingMasterPlaylistData:(NSData * _Nonnull)masterData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingVariantPlaylistData:(NSData * _Nonnull)variantData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingPlaylistWithError:(NSError * _Nonnull)error;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyData:(NSData * _Nonnull)keyData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyWithError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event;
@end




SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end




SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The seek target time interval in seconds.
@property (nonatomic, readonly) NSTimeInterval seekTarget;
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position seekTarget:(NSTimeInterval)seekTarget OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfiguration#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPAVPlayerItem;
@protocol _BMPAVPlayerObserver;
@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVPlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPPlayerConfiguration;
@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// The threshold value for TimeService.getMaxTimeShift.
/// When the internal value for the maximal possible timeshift is lower than this threshold, timeshifting should be
/// disabled. That means TimeService.getMaxTimeShift returns 0 in that case.
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPSourceUnloadedEvent;

@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setupAudioTracks;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end


SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onReady:(BMPReadyEvent * _Nonnull)event;
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end

@class BMPSourceLoadedEvent;

SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <BMPPlayerListener, _BMPConfigurationService>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_EventEmitter")
@protocol _BMPEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end

@class BMPSourceItem;

SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
- (void)start;
- (void)stop;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end


SWIFT_CLASS_NAMED("_DefaultResourceLoaderService")
@interface _BMPDefaultResourceLoaderService : _BMPDefaultService <_BMPResourceLoaderService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;
@class AVAssetResourceRenewalRequest;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPFairplayHandler;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPFairplayHandlerDelegate>
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishWithError:(NSError * _Nonnull)error;
@end

@class _BMPBitmovinResourceLoader;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBitmovinResourceLoaderDelegate>
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingMasterPlaylistData:(NSData * _Nonnull)masterData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingVariantPlaylistData:(NSData * _Nonnull)variantData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingPlaylistWithError:(NSError * _Nonnull)error;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyData:(NSData * _Nonnull)keyData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyWithError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event;
@end




SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end




SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end






@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The seek target time interval in seconds.
@property (nonatomic, readonly) NSTimeInterval seekTarget;
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position seekTarget:(NSTimeInterval)seekTarget OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfiguration#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPAVPlayerItem;
@protocol _BMPAVPlayerObserver;
@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVPlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPPlayerConfiguration;
@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// The threshold value for TimeService.getMaxTimeShift.
/// When the internal value for the maximal possible timeshift is lower than this threshold, timeshifting should be
/// disabled. That means TimeService.getMaxTimeShift returns 0 in that case.
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPSourceUnloadedEvent;

@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setupAudioTracks;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end


SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onReady:(BMPReadyEvent * _Nonnull)event;
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end

@class BMPSourceLoadedEvent;

SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <BMPPlayerListener, _BMPConfigurationService>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_EventEmitter")
@protocol _BMPEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end

@class BMPSourceItem;

SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
- (void)start;
- (void)stop;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end


SWIFT_CLASS_NAMED("_DefaultResourceLoaderService")
@interface _BMPDefaultResourceLoaderService : _BMPDefaultService <_BMPResourceLoaderService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;
@class AVAssetResourceRenewalRequest;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPFairplayHandler;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPFairplayHandlerDelegate>
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishWithError:(NSError * _Nonnull)error;
@end

@class _BMPBitmovinResourceLoader;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBitmovinResourceLoaderDelegate>
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingMasterPlaylistData:(NSData * _Nonnull)masterData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingVariantPlaylistData:(NSData * _Nonnull)variantData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingPlaylistWithError:(NSError * _Nonnull)error;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyData:(NSData * _Nonnull)keyData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyWithError:(NSError * _Nonnull)error;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event;
@end




SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end




SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif

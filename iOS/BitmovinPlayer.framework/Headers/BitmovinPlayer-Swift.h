#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
#if 0
#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol BMPAdBreak;

/// Base class for ad break related event classes.
SWIFT_CLASS_NAMED("AdBreakEvent")
@interface BMPAdBreakEvent : BMPPlayerEvent
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nonnull adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdBreakFinishedEvent")
@interface BMPAdBreakFinishedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdBreakStartedEvent")
@interface BMPAdBreakStartedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdClickedEvent")
@interface BMPAdClickedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ErrorEvent")
@interface BMPErrorEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSUInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCode:(NSUInteger)code message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPAdItem;
@protocol BMPAdConfig;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdErrorEvent")
@interface BMPAdErrorEvent : BMPErrorEvent
@property (nonatomic, readonly, strong) BMPAdItem * _Nullable adItem;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdItem:(BMPAdItem * _Nullable)adItem code:(NSUInteger)code message:(NSString * _Nonnull)message adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCode:(NSUInteger)code message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end

@protocol BMPAd;

/// Base class for ad related event classes.
SWIFT_CLASS_NAMED("AdEvent")
@interface BMPAdEvent : BMPPlayerEvent
/// Returns the <code>Ad</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAd> _Nonnull ad;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdFinishedEvent")
@interface BMPAdFinishedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadEvent")
@interface BMPAdManifestLoadEvent : BMPPlayerEvent
/// Returns the <code>AdConfig</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdConfig:(id <BMPAdConfig> _Nullable)adConfig adBreak:(id <BMPAdBreak> _Nullable)adBreak OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadedEvent")
@interface BMPAdManifestLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDownloadTime:(NSTimeInterval)downloadTime adBreak:(id <BMPAdBreak> _Nullable)adBreak adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdSkippedEvent")
@interface BMPAdSkippedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdStartedEvent")
@interface BMPAdStartedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly) BMPAdSourceType clientType;
@property (nonatomic, readonly) NSUInteger indexInQueue;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) NSTimeInterval timeOffset;
@property (nonatomic, readonly) NSTimeInterval skipOffset;
@property (nonatomic, readonly, copy) NSString * _Nullable position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl clientType:(BMPAdSourceType)clientType indexInQueue:(NSUInteger)indexInQueue duration:(NSTimeInterval)duration timeOffset:(NSTimeInterval)timeOffset skipOffset:(NSTimeInterval)skipOffset position:(NSString * _Nullable)position ad:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad SWIFT_UNAVAILABLE;
@end

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPRemoteControlConfiguration;
@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







@interface NSFileManager (SWIFT_EXTENSION(BitmovinPlayer))
- (NSArray<NSString *> * _Nonnull)_bmp_findPlaylistsAtContentLocation:(NSURL * _Nonnull)contentLocation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("LiveConfiguration")
@interface BMPLiveConfiguration : BMPConfiguration
/// The minimum buffer depth of a stream needed to enable time shifting.
/// When the internal value for the maximal possible timeshift is lower than this value, timeshifting should be
/// disabled. That means Player.maxTimeShift returns 0 in that case.
/// This value should always be non-positive value, default value is -40
@property (nonatomic) NSTimeInterval minTimeshiftBufferDepth;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSString (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, strong) NSString * _Nonnull bmp_md5;
@end




@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer26PictureInPictureEnterEvent")
@interface PictureInPictureEnterEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer28PictureInPictureEnteredEvent")
@interface PictureInPictureEnteredEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer25PictureInPictureExitEvent")
@interface PictureInPictureExitEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer27PictureInPictureExitedEvent")
@interface PictureInPictureExitedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, BMPPlaybackStartBehaviour, "PlaybackStartBehaviour", open) {
/// Starts playback when enough media data is buffered and continuous playback without stalling can be ensured.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourRelaxed = 0,
/// When the buffer is not empty, this setting will cause the player to start playback of
/// available media immediately.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourAggressive = 1,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("ScalingModeChangedEvent")
@interface BMPScalingModeChangedEvent : BMPPlayerEvent
/// The old scaling mode value
@property (nonatomic, readonly) BMPScalingMode from;
/// The new scaling mode value
@property (nonatomic, readonly) BMPScalingMode to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The seek target time interval in seconds.
@property (nonatomic, readonly) NSTimeInterval seekTarget;
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position seekTarget:(NSTimeInterval)seekTarget OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPSourceItem (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, copy) NSString * _Nullable bmp_uniqueIdentifier;
@property (nonatomic, readonly, copy) NSURL * _Nullable bmp_sourceUrlForDownload;
@property (nonatomic, readonly) BOOL bmp_canBeDownloaded;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadedEvent")
@interface BMPSourceLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPSourceItem * _Nonnull sourceItem;
@property (nonatomic, readonly) BMPMediaSourceType streamType;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem streamType:(BMPMediaSourceType)streamType OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadedEvent")
@interface BMPSourceUnloadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceWillUnloadEvent")
@interface BMPSourceWillUnloadEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfiguration#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BMPUnstallingBehaviour : NSUInteger;

SWIFT_CLASS_NAMED("TweaksConfiguration")
@interface BMPTweaksConfiguration : BMPConfiguration
/// If enabled, HLS playlists would be parsed and corresponding events carrying segment-specific metadata,
/// e.g. <code>#EXT-X-SCTE35</code> tag if present in the manifest, are going to be sent.
/// Default is <code>false</code>.
@property (nonatomic) BOOL isNativeHlsParsingEnabled;
/// :nodoc:
@property (nonatomic) BOOL nativeHlsParsingEnabled;
/// If enabled, playlists will be downloaded by the Bitmovin Player SDK instead of <code>AVFoundation</code>.
/// If set to <code>false</code>, enabling <code>nativeHlsParsingEnabled</code> won’t have any effect.
/// Default is <code>true</code>.
@property (nonatomic) BOOL isCustomHlsLoadingEnabled;
/// :nodoc:
@property (nonatomic) BOOL customHlsLoadingEnabled;
/// The frequency in seconds <code>PlayerListener#onTimeChanged</code> is called with <code>TimeChangedEvents</code>.
/// Default is 1. Minimum is 0.025.
@property (nonatomic) NSTimeInterval timeChangedInterval;
/// When duration for subtitle tracks mismatch between
/// the HLS manifest and the subtitle track, this can cause the player to get stalled or prevent it from
/// rendering subtitles after seeking. This can be avoided by deselecting subtitles during seeking and reselecting
/// them afterwards.
/// If set to <code>true</code>, active subtitle track will be deselected before seeking and reselected when seeking finished.
/// No subtitle change related events will be fired.
/// If set to false, no changes are applied to subtitle selection on seeking.
/// Default is <code>false</code>.
@property (nonatomic) BOOL disableSubtitleTracksWhileSeeking;
/// Specifies the player behaviour when <code>Player.play</code> is called.
/// Default is <code>PlaybackStartBehaviour.relaxed</code>
/// This setting requires that the <code>PlayerConfiguration</code> is
/// passed to the constructor of the <code>BitmovinPlayer</code> already.
/// Setting/changing this configuration via the <code>PlayerAPI.setup</code> call is not supported.
@property (nonatomic) enum BMPPlaybackStartBehaviour playbackStartBehaviour;
/// Specifies the player behaviour when stalling should be exited.
/// Default is <code>UnstallingBehaviour.relaxed</code>
/// This setting requires that the <code>PlayerConfiguration</code> is
/// passed to the constructor of the <code>BitmovinPlayer</code> already.
/// Setting/changing this configuration via the <code>PlayerAPI.setup</code> call is not supported.
@property (nonatomic) enum BMPUnstallingBehaviour unstallingBehaviour;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM_NAMED(NSUInteger, BMPUnstallingBehaviour, "UnstallingBehaviour", open) {
/// The player will wait until the buffer is filled that it can, most likely,
/// ensure continuous playback without another stalling right after playback continued.
  BMPUnstallingBehaviourRelaxed = 0,
/// The player will try to unstall as soon as some media data became available and will
/// start playback of this media immediately.
  BMPUnstallingBehaviourAggressive = 1,
};


@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end

@protocol _BMPCaptionHandlerDelegate;
@class BMPSubtitleTrack;
@protocol _BMPConfigurationService;
@class _BMPAVPlayer;

SWIFT_CLASS_NAMED("_AVPlayerCaptionHandler")
@interface _BMPAVPlayerCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService player:(_BMPAVPlayer * _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPAVPlayerItem;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class AVMediaSelectionOption;
@class AVMediaSelectionGroup;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willSeekToTargetTime:(CMTime)seekTarget;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didSeekWithSuccess:(BOOL)finished;
@end


SWIFT_PROTOCOL_NAMED("_CaptionHandler")
@protocol _BMPCaptionHandler
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
/// note:
/// no-op when the passed subtitle is already active
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
/// note:
/// no-op when no subtitle is currently active
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayerViewController;

SWIFT_PROTOCOL_NAMED("_AVPlayerViewControllerListener")
@protocol _BMPAVPlayerViewControllerListener
@optional
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController willTransitionToVisibilityOfTransportBar:(BOOL)visible;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
@end


/// Helper class to map the single delegate pattern to a multi listener pattern
SWIFT_CLASS_NAMED("_AVPlayerViewControllerProxy")
@interface _BMPAVPlayerViewControllerProxy : NSObject
@property (nonatomic, readonly, strong) AVPlayerViewController * _Nonnull avPlayerViewController;
- (nonnull instancetype)initWithAvPlayerViewController:(AVPlayerViewController * _Nonnull)avPlayerViewController OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)addListener:(id <_BMPAVPlayerViewControllerListener> _Nonnull)listener;
- (void)removeListener:(id <_BMPAVPlayerViewControllerListener> _Nonnull)listener;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPAVPlayerViewControllerProxy (SWIFT_EXTENSION(BitmovinPlayer)) <AVPlayerViewControllerDelegate>
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController failedToStartPictureInPictureWithError:(NSError * _Nonnull)error;
@end

@class UIView;
@class UIViewController;

@interface _BMPAVPlayerViewControllerProxy (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic) AVLayerVideoGravity _Nonnull videoGravity;
@property (nonatomic, strong) UIView * _Nonnull view;
@property (nonatomic) BOOL showsPlaybackControls;
- (void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
- (void)removeFromParentViewController;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@end

@class _BMPPersistentArchive;

/// Handles the interaction with the archive where we store metadata about the offline content.
/// In addition it provides URLs which are needed from time to time.
SWIFT_PROTOCOL_NAMED("_ArchiveHelper")
@protocol _BMPArchiveHelper
@property (nonatomic, readonly, strong) _BMPPersistentArchive * _Nullable archive;
/// The URL to the directory where the archive / plist file is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentDirectoryUrl;
/// The URL to the MOVPKG aka the downloaded video / content
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentUrl;
/// Convenience method to check if we have stored content
@property (nonatomic, readonly) BOOL isStored;
@end

@protocol _BMPLogger;

SWIFT_CLASS_NAMED("_ArchiveHelperFactory")
@interface _BMPArchiveHelperFactory : NSObject
+ (id <_BMPArchiveHelper> _Nonnull)createForSourceItem:(BMPSourceItem * _Nonnull)sourceItem withLogger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>_AutoPlayHandler</code> is responsible of handling auto play when it is configured
SWIFT_PROTOCOL_NAMED("_AutoPlayHandler")
@protocol _BMPAutoPlayHandler
@end

@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVPlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_CafSourceOptions")
@interface _BMPCafSourceOptions : NSObject
- (nonnull instancetype)initWithSendManifestRequestsWithCredentials:(BOOL)sendManifestRequestsWithCredentials sendSegmentRequestsWithCredentials:(BOOL)sendSegmentRequestsWithCredentials OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPPlayerConfiguration;
@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPInternalReadyEvent;

@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end

@protocol BMPPlayerAPI;
@protocol BMPPlayerEventHandler;
@protocol BMPRemoteControlAPI;

SWIFT_CLASS_NAMED("_DefaultAutoPlayHandler")
@interface _BMPDefaultAutoPlayHandler : NSObject <_BMPAutoPlayHandler>
- (nonnull instancetype)initWithPlayer:(id <BMPPlayerAPI> _Nonnull)player eventHandler:(id <BMPPlayerEventHandler> _Nonnull)eventHandler remoteControl:(id <BMPRemoteControlAPI> _Nonnull)remoteControl configurationService:(id <_BMPConfigurationService> _Nonnull)configurationService playbackStartBehaviour:(enum BMPPlaybackStartBehaviour)playbackStartBehaviour OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPInternalBufferLevelChangedEvent;

@interface _BMPDefaultAutoPlayHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event;
- (void)onInternalBufferLevelChanged:(_BMPInternalBufferLevelChangedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSValue;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeLoadedTimeRanges:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onReady:(BMPReadyEvent * _Nonnull)event;
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <BMPPlayerListener, _BMPConfigurationService>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_EventEmitter")
@protocol _BMPEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end


SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
- (void)start;
- (void)stop;
@end


SWIFT_PROTOCOL_NAMED("_PictureInPictureService")
@protocol _BMPPictureInPictureService
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
@end

@class AVPictureInPictureController;
@protocol BMPUserInterfaceListener;

SWIFT_CLASS_NAMED("_DefaultPictureInPictureService")
@interface _BMPDefaultPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (nonnull instancetype)initWithPictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <AVPictureInPictureControllerDelegate>
- (void)pictureInPictureControllerWillStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerWillStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end


SWIFT_CLASS_NAMED("_DefaultResourceLoaderService")
@interface _BMPDefaultResourceLoaderService : _BMPDefaultService <_BMPResourceLoaderService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;
@class AVAssetResourceRenewalRequest;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPFairplayHandler;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPFairplayHandlerDelegate>
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishWithError:(NSError * _Nonnull)error;
@end

@class _BMPBitmovinResourceLoader;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBitmovinResourceLoaderDelegate>
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingMasterPlaylistData:(NSData * _Nonnull)masterData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingVariantPlaylistData:(NSData * _Nonnull)variantData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingPlaylistWithError:(NSError * _Nonnull)error;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyData:(NSData * _Nonnull)keyData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyWithError:(NSError * _Nonnull)error;
@end

@class AVPlayerLayer;

SWIFT_CLASS_NAMED("_DefaultScalingModeService")
@interface _BMPDefaultScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerLayer:(AVPlayerLayer * _Nonnull)avPlayerLayer uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ScalingModeService")
@protocol _BMPScalingModeService
@property (nonatomic) BMPScalingMode scalingMode;
@end


@interface _BMPDefaultScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event;
@end


/// Helper class to handle view ordering when needed
/// Desired view hierarchy is: (top to bottom)
/// <ul>
///   <li>
///     PlayerView (BitmovinPlayer UI or System UI)
///   </li>
///   <li>
///     PosterView (only available on iOS)
///   </li>
///   <li>
///     ShutterView (only available on iOS)
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("_ViewHierarchyHandler")
@protocol _BMPViewHierarchyHandler
@property (nonatomic, strong) UIView * _Nullable shutterView;
@property (nonatomic, strong) UIView * _Nullable posterView;
@property (nonatomic, strong) UIView * _Nullable playerView;
- (void)handleSubViewOrdering;
@end


SWIFT_CLASS_NAMED("_DefaultViewHierarchyHandler")
@interface _BMPDefaultViewHierarchyHandler : NSObject <_BMPViewHierarchyHandler>
@property (nonatomic, weak) UIView * _Nullable shutterView;
@property (nonatomic, weak) UIView * _Nullable posterView;
@property (nonatomic, weak) UIView * _Nullable playerView;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView OBJC_DESIGNATED_INITIALIZER;
- (void)handleSubViewOrdering;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("_ExternalCaptionHandler")
@interface _BMPExternalCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService deficiencyService:(id <_BMPDeficiencyService> _Nonnull)deficiencyService eventEmitter:(id <_BMPEventEmitter> _Nonnull)eventEmitter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPExternalCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListenerInternal.h for more information on this event.
SWIFT_CLASS_NAMED("_InternalBufferLevelChangedEvent")
@interface _BMPInternalBufferLevelChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPBufferLevel * _Nonnull forwardBufferLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("_InternalCastReadyEvent")
@interface _BMPInternalCastReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata options:(_BMPCafSourceOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end




SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("_ShutterController")
@interface _BMPShutterController : NSObject
@property (nonatomic, unsafe_unretained) id <BMPPlayerAPI, BMPPlayerEventHandler> _Nonnull player;
@property (nonatomic, readonly, strong) UIView * _Nonnull shutterView;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayerAPI, BMPPlayerEventHandler> _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPPlayingEvent;

@interface _BMPShutterController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onUnseen:(NSArray<BMPPlayerEvent *> * _Nonnull)unseenEvents;
- (void)onPlaying:(BMPPlayingEvent * _Nonnull)event;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
@end

@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SystemUiPictureInPictureService")
@interface _BMPSystemUiPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (nonnull instancetype)initWithAvPlayerViewControllerProxy:(_BMPAVPlayerViewControllerProxy * _Nonnull)avPlayerViewControllerProxy uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter logger:(id <_BMPLogger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSystemUiPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerViewControllerListener>
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
@end


SWIFT_CLASS_NAMED("_SystemUiScalingModeService")
@interface _BMPSystemUiScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerViewControllerProxy:(_BMPAVPlayerViewControllerProxy * _Nonnull)avPlayerViewControllerProxy uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSystemUiScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerViewControllerListener>
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
@end


@interface _BMPSystemUiScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_UIDeviceVersionHelper")
@interface _BMPUIDeviceVersionHelper : NSObject
- (nonnull instancetype)init;
- (BOOL)isSystemVersionGreaterThanOrEqual:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSystemVersionLessThan:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__i386__) && __i386__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol BMPAdBreak;

/// Base class for ad break related event classes.
SWIFT_CLASS_NAMED("AdBreakEvent")
@interface BMPAdBreakEvent : BMPPlayerEvent
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nonnull adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdBreakFinishedEvent")
@interface BMPAdBreakFinishedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdBreakStartedEvent")
@interface BMPAdBreakStartedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdClickedEvent")
@interface BMPAdClickedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ErrorEvent")
@interface BMPErrorEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSUInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCode:(NSUInteger)code message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPAdItem;
@protocol BMPAdConfig;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdErrorEvent")
@interface BMPAdErrorEvent : BMPErrorEvent
@property (nonatomic, readonly, strong) BMPAdItem * _Nullable adItem;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdItem:(BMPAdItem * _Nullable)adItem code:(NSUInteger)code message:(NSString * _Nonnull)message adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCode:(NSUInteger)code message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end

@protocol BMPAd;

/// Base class for ad related event classes.
SWIFT_CLASS_NAMED("AdEvent")
@interface BMPAdEvent : BMPPlayerEvent
/// Returns the <code>Ad</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAd> _Nonnull ad;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdFinishedEvent")
@interface BMPAdFinishedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadEvent")
@interface BMPAdManifestLoadEvent : BMPPlayerEvent
/// Returns the <code>AdConfig</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdConfig:(id <BMPAdConfig> _Nullable)adConfig adBreak:(id <BMPAdBreak> _Nullable)adBreak OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadedEvent")
@interface BMPAdManifestLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDownloadTime:(NSTimeInterval)downloadTime adBreak:(id <BMPAdBreak> _Nullable)adBreak adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdSkippedEvent")
@interface BMPAdSkippedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdStartedEvent")
@interface BMPAdStartedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly) BMPAdSourceType clientType;
@property (nonatomic, readonly) NSUInteger indexInQueue;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) NSTimeInterval timeOffset;
@property (nonatomic, readonly) NSTimeInterval skipOffset;
@property (nonatomic, readonly, copy) NSString * _Nullable position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl clientType:(BMPAdSourceType)clientType indexInQueue:(NSUInteger)indexInQueue duration:(NSTimeInterval)duration timeOffset:(NSTimeInterval)timeOffset skipOffset:(NSTimeInterval)skipOffset position:(NSString * _Nullable)position ad:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad SWIFT_UNAVAILABLE;
@end

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPRemoteControlConfiguration;
@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







@interface NSFileManager (SWIFT_EXTENSION(BitmovinPlayer))
- (NSArray<NSString *> * _Nonnull)_bmp_findPlaylistsAtContentLocation:(NSURL * _Nonnull)contentLocation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("LiveConfiguration")
@interface BMPLiveConfiguration : BMPConfiguration
/// The minimum buffer depth of a stream needed to enable time shifting.
/// When the internal value for the maximal possible timeshift is lower than this value, timeshifting should be
/// disabled. That means Player.maxTimeShift returns 0 in that case.
/// This value should always be non-positive value, default value is -40
@property (nonatomic) NSTimeInterval minTimeshiftBufferDepth;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSString (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, strong) NSString * _Nonnull bmp_md5;
@end




@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer26PictureInPictureEnterEvent")
@interface PictureInPictureEnterEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer28PictureInPictureEnteredEvent")
@interface PictureInPictureEnteredEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer25PictureInPictureExitEvent")
@interface PictureInPictureExitEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer27PictureInPictureExitedEvent")
@interface PictureInPictureExitedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, BMPPlaybackStartBehaviour, "PlaybackStartBehaviour", open) {
/// Starts playback when enough media data is buffered and continuous playback without stalling can be ensured.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourRelaxed = 0,
/// When the buffer is not empty, this setting will cause the player to start playback of
/// available media immediately.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourAggressive = 1,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("ScalingModeChangedEvent")
@interface BMPScalingModeChangedEvent : BMPPlayerEvent
/// The old scaling mode value
@property (nonatomic, readonly) BMPScalingMode from;
/// The new scaling mode value
@property (nonatomic, readonly) BMPScalingMode to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The seek target time interval in seconds.
@property (nonatomic, readonly) NSTimeInterval seekTarget;
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position seekTarget:(NSTimeInterval)seekTarget OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPSourceItem (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, copy) NSString * _Nullable bmp_uniqueIdentifier;
@property (nonatomic, readonly, copy) NSURL * _Nullable bmp_sourceUrlForDownload;
@property (nonatomic, readonly) BOOL bmp_canBeDownloaded;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadedEvent")
@interface BMPSourceLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPSourceItem * _Nonnull sourceItem;
@property (nonatomic, readonly) BMPMediaSourceType streamType;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem streamType:(BMPMediaSourceType)streamType OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadedEvent")
@interface BMPSourceUnloadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceWillUnloadEvent")
@interface BMPSourceWillUnloadEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfiguration#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BMPUnstallingBehaviour : NSUInteger;

SWIFT_CLASS_NAMED("TweaksConfiguration")
@interface BMPTweaksConfiguration : BMPConfiguration
/// If enabled, HLS playlists would be parsed and corresponding events carrying segment-specific metadata,
/// e.g. <code>#EXT-X-SCTE35</code> tag if present in the manifest, are going to be sent.
/// Default is <code>false</code>.
@property (nonatomic) BOOL isNativeHlsParsingEnabled;
/// :nodoc:
@property (nonatomic) BOOL nativeHlsParsingEnabled;
/// If enabled, playlists will be downloaded by the Bitmovin Player SDK instead of <code>AVFoundation</code>.
/// If set to <code>false</code>, enabling <code>nativeHlsParsingEnabled</code> won’t have any effect.
/// Default is <code>true</code>.
@property (nonatomic) BOOL isCustomHlsLoadingEnabled;
/// :nodoc:
@property (nonatomic) BOOL customHlsLoadingEnabled;
/// The frequency in seconds <code>PlayerListener#onTimeChanged</code> is called with <code>TimeChangedEvents</code>.
/// Default is 1. Minimum is 0.025.
@property (nonatomic) NSTimeInterval timeChangedInterval;
/// When duration for subtitle tracks mismatch between
/// the HLS manifest and the subtitle track, this can cause the player to get stalled or prevent it from
/// rendering subtitles after seeking. This can be avoided by deselecting subtitles during seeking and reselecting
/// them afterwards.
/// If set to <code>true</code>, active subtitle track will be deselected before seeking and reselected when seeking finished.
/// No subtitle change related events will be fired.
/// If set to false, no changes are applied to subtitle selection on seeking.
/// Default is <code>false</code>.
@property (nonatomic) BOOL disableSubtitleTracksWhileSeeking;
/// Specifies the player behaviour when <code>Player.play</code> is called.
/// Default is <code>PlaybackStartBehaviour.relaxed</code>
/// This setting requires that the <code>PlayerConfiguration</code> is
/// passed to the constructor of the <code>BitmovinPlayer</code> already.
/// Setting/changing this configuration via the <code>PlayerAPI.setup</code> call is not supported.
@property (nonatomic) enum BMPPlaybackStartBehaviour playbackStartBehaviour;
/// Specifies the player behaviour when stalling should be exited.
/// Default is <code>UnstallingBehaviour.relaxed</code>
/// This setting requires that the <code>PlayerConfiguration</code> is
/// passed to the constructor of the <code>BitmovinPlayer</code> already.
/// Setting/changing this configuration via the <code>PlayerAPI.setup</code> call is not supported.
@property (nonatomic) enum BMPUnstallingBehaviour unstallingBehaviour;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM_NAMED(NSUInteger, BMPUnstallingBehaviour, "UnstallingBehaviour", open) {
/// The player will wait until the buffer is filled that it can, most likely,
/// ensure continuous playback without another stalling right after playback continued.
  BMPUnstallingBehaviourRelaxed = 0,
/// The player will try to unstall as soon as some media data became available and will
/// start playback of this media immediately.
  BMPUnstallingBehaviourAggressive = 1,
};


@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end

@protocol _BMPCaptionHandlerDelegate;
@class BMPSubtitleTrack;
@protocol _BMPConfigurationService;
@class _BMPAVPlayer;

SWIFT_CLASS_NAMED("_AVPlayerCaptionHandler")
@interface _BMPAVPlayerCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService player:(_BMPAVPlayer * _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPAVPlayerItem;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class AVMediaSelectionOption;
@class AVMediaSelectionGroup;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willSeekToTargetTime:(CMTime)seekTarget;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didSeekWithSuccess:(BOOL)finished;
@end


SWIFT_PROTOCOL_NAMED("_CaptionHandler")
@protocol _BMPCaptionHandler
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
/// note:
/// no-op when the passed subtitle is already active
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
/// note:
/// no-op when no subtitle is currently active
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayerViewController;

SWIFT_PROTOCOL_NAMED("_AVPlayerViewControllerListener")
@protocol _BMPAVPlayerViewControllerListener
@optional
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController willTransitionToVisibilityOfTransportBar:(BOOL)visible;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
@end


/// Helper class to map the single delegate pattern to a multi listener pattern
SWIFT_CLASS_NAMED("_AVPlayerViewControllerProxy")
@interface _BMPAVPlayerViewControllerProxy : NSObject
@property (nonatomic, readonly, strong) AVPlayerViewController * _Nonnull avPlayerViewController;
- (nonnull instancetype)initWithAvPlayerViewController:(AVPlayerViewController * _Nonnull)avPlayerViewController OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)addListener:(id <_BMPAVPlayerViewControllerListener> _Nonnull)listener;
- (void)removeListener:(id <_BMPAVPlayerViewControllerListener> _Nonnull)listener;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPAVPlayerViewControllerProxy (SWIFT_EXTENSION(BitmovinPlayer)) <AVPlayerViewControllerDelegate>
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController failedToStartPictureInPictureWithError:(NSError * _Nonnull)error;
@end

@class UIView;
@class UIViewController;

@interface _BMPAVPlayerViewControllerProxy (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic) AVLayerVideoGravity _Nonnull videoGravity;
@property (nonatomic, strong) UIView * _Nonnull view;
@property (nonatomic) BOOL showsPlaybackControls;
- (void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
- (void)removeFromParentViewController;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@end

@class _BMPPersistentArchive;

/// Handles the interaction with the archive where we store metadata about the offline content.
/// In addition it provides URLs which are needed from time to time.
SWIFT_PROTOCOL_NAMED("_ArchiveHelper")
@protocol _BMPArchiveHelper
@property (nonatomic, readonly, strong) _BMPPersistentArchive * _Nullable archive;
/// The URL to the directory where the archive / plist file is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentDirectoryUrl;
/// The URL to the MOVPKG aka the downloaded video / content
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentUrl;
/// Convenience method to check if we have stored content
@property (nonatomic, readonly) BOOL isStored;
@end

@protocol _BMPLogger;

SWIFT_CLASS_NAMED("_ArchiveHelperFactory")
@interface _BMPArchiveHelperFactory : NSObject
+ (id <_BMPArchiveHelper> _Nonnull)createForSourceItem:(BMPSourceItem * _Nonnull)sourceItem withLogger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>_AutoPlayHandler</code> is responsible of handling auto play when it is configured
SWIFT_PROTOCOL_NAMED("_AutoPlayHandler")
@protocol _BMPAutoPlayHandler
@end

@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVPlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_CafSourceOptions")
@interface _BMPCafSourceOptions : NSObject
- (nonnull instancetype)initWithSendManifestRequestsWithCredentials:(BOOL)sendManifestRequestsWithCredentials sendSegmentRequestsWithCredentials:(BOOL)sendSegmentRequestsWithCredentials OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPPlayerConfiguration;
@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPInternalReadyEvent;

@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end

@protocol BMPPlayerAPI;
@protocol BMPPlayerEventHandler;
@protocol BMPRemoteControlAPI;

SWIFT_CLASS_NAMED("_DefaultAutoPlayHandler")
@interface _BMPDefaultAutoPlayHandler : NSObject <_BMPAutoPlayHandler>
- (nonnull instancetype)initWithPlayer:(id <BMPPlayerAPI> _Nonnull)player eventHandler:(id <BMPPlayerEventHandler> _Nonnull)eventHandler remoteControl:(id <BMPRemoteControlAPI> _Nonnull)remoteControl configurationService:(id <_BMPConfigurationService> _Nonnull)configurationService playbackStartBehaviour:(enum BMPPlaybackStartBehaviour)playbackStartBehaviour OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPInternalBufferLevelChangedEvent;

@interface _BMPDefaultAutoPlayHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event;
- (void)onInternalBufferLevelChanged:(_BMPInternalBufferLevelChangedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSValue;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeLoadedTimeRanges:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onReady:(BMPReadyEvent * _Nonnull)event;
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <BMPPlayerListener, _BMPConfigurationService>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_EventEmitter")
@protocol _BMPEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end


SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
- (void)start;
- (void)stop;
@end


SWIFT_PROTOCOL_NAMED("_PictureInPictureService")
@protocol _BMPPictureInPictureService
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
@end

@class AVPictureInPictureController;
@protocol BMPUserInterfaceListener;

SWIFT_CLASS_NAMED("_DefaultPictureInPictureService")
@interface _BMPDefaultPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (nonnull instancetype)initWithPictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <AVPictureInPictureControllerDelegate>
- (void)pictureInPictureControllerWillStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerWillStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end


SWIFT_CLASS_NAMED("_DefaultResourceLoaderService")
@interface _BMPDefaultResourceLoaderService : _BMPDefaultService <_BMPResourceLoaderService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;
@class AVAssetResourceRenewalRequest;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPFairplayHandler;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPFairplayHandlerDelegate>
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishWithError:(NSError * _Nonnull)error;
@end

@class _BMPBitmovinResourceLoader;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBitmovinResourceLoaderDelegate>
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingMasterPlaylistData:(NSData * _Nonnull)masterData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingVariantPlaylistData:(NSData * _Nonnull)variantData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingPlaylistWithError:(NSError * _Nonnull)error;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyData:(NSData * _Nonnull)keyData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyWithError:(NSError * _Nonnull)error;
@end

@class AVPlayerLayer;

SWIFT_CLASS_NAMED("_DefaultScalingModeService")
@interface _BMPDefaultScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerLayer:(AVPlayerLayer * _Nonnull)avPlayerLayer uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ScalingModeService")
@protocol _BMPScalingModeService
@property (nonatomic) BMPScalingMode scalingMode;
@end


@interface _BMPDefaultScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event;
@end


/// Helper class to handle view ordering when needed
/// Desired view hierarchy is: (top to bottom)
/// <ul>
///   <li>
///     PlayerView (BitmovinPlayer UI or System UI)
///   </li>
///   <li>
///     PosterView (only available on iOS)
///   </li>
///   <li>
///     ShutterView (only available on iOS)
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("_ViewHierarchyHandler")
@protocol _BMPViewHierarchyHandler
@property (nonatomic, strong) UIView * _Nullable shutterView;
@property (nonatomic, strong) UIView * _Nullable posterView;
@property (nonatomic, strong) UIView * _Nullable playerView;
- (void)handleSubViewOrdering;
@end


SWIFT_CLASS_NAMED("_DefaultViewHierarchyHandler")
@interface _BMPDefaultViewHierarchyHandler : NSObject <_BMPViewHierarchyHandler>
@property (nonatomic, weak) UIView * _Nullable shutterView;
@property (nonatomic, weak) UIView * _Nullable posterView;
@property (nonatomic, weak) UIView * _Nullable playerView;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView OBJC_DESIGNATED_INITIALIZER;
- (void)handleSubViewOrdering;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("_ExternalCaptionHandler")
@interface _BMPExternalCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService deficiencyService:(id <_BMPDeficiencyService> _Nonnull)deficiencyService eventEmitter:(id <_BMPEventEmitter> _Nonnull)eventEmitter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPExternalCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListenerInternal.h for more information on this event.
SWIFT_CLASS_NAMED("_InternalBufferLevelChangedEvent")
@interface _BMPInternalBufferLevelChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPBufferLevel * _Nonnull forwardBufferLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("_InternalCastReadyEvent")
@interface _BMPInternalCastReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata options:(_BMPCafSourceOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end




SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("_ShutterController")
@interface _BMPShutterController : NSObject
@property (nonatomic, unsafe_unretained) id <BMPPlayerAPI, BMPPlayerEventHandler> _Nonnull player;
@property (nonatomic, readonly, strong) UIView * _Nonnull shutterView;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayerAPI, BMPPlayerEventHandler> _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPPlayingEvent;

@interface _BMPShutterController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onUnseen:(NSArray<BMPPlayerEvent *> * _Nonnull)unseenEvents;
- (void)onPlaying:(BMPPlayingEvent * _Nonnull)event;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
@end

@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SystemUiPictureInPictureService")
@interface _BMPSystemUiPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (nonnull instancetype)initWithAvPlayerViewControllerProxy:(_BMPAVPlayerViewControllerProxy * _Nonnull)avPlayerViewControllerProxy uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter logger:(id <_BMPLogger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSystemUiPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerViewControllerListener>
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
@end


SWIFT_CLASS_NAMED("_SystemUiScalingModeService")
@interface _BMPSystemUiScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerViewControllerProxy:(_BMPAVPlayerViewControllerProxy * _Nonnull)avPlayerViewControllerProxy uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSystemUiScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerViewControllerListener>
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
@end


@interface _BMPSystemUiScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_UIDeviceVersionHelper")
@interface _BMPUIDeviceVersionHelper : NSObject
- (nonnull instancetype)init;
- (BOOL)isSystemVersionGreaterThanOrEqual:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSystemVersionLessThan:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#else
#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol BMPAdBreak;

/// Base class for ad break related event classes.
SWIFT_CLASS_NAMED("AdBreakEvent")
@interface BMPAdBreakEvent : BMPPlayerEvent
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nonnull adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdBreakFinishedEvent")
@interface BMPAdBreakFinishedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdBreakStartedEvent")
@interface BMPAdBreakStartedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdClickedEvent")
@interface BMPAdClickedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ErrorEvent")
@interface BMPErrorEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSUInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCode:(NSUInteger)code message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPAdItem;
@protocol BMPAdConfig;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdErrorEvent")
@interface BMPAdErrorEvent : BMPErrorEvent
@property (nonatomic, readonly, strong) BMPAdItem * _Nullable adItem;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdItem:(BMPAdItem * _Nullable)adItem code:(NSUInteger)code message:(NSString * _Nonnull)message adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCode:(NSUInteger)code message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end

@protocol BMPAd;

/// Base class for ad related event classes.
SWIFT_CLASS_NAMED("AdEvent")
@interface BMPAdEvent : BMPPlayerEvent
/// Returns the <code>Ad</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAd> _Nonnull ad;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdFinishedEvent")
@interface BMPAdFinishedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadEvent")
@interface BMPAdManifestLoadEvent : BMPPlayerEvent
/// Returns the <code>AdConfig</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdConfig:(id <BMPAdConfig> _Nullable)adConfig adBreak:(id <BMPAdBreak> _Nullable)adBreak OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadedEvent")
@interface BMPAdManifestLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDownloadTime:(NSTimeInterval)downloadTime adBreak:(id <BMPAdBreak> _Nullable)adBreak adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdSkippedEvent")
@interface BMPAdSkippedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdStartedEvent")
@interface BMPAdStartedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly) BMPAdSourceType clientType;
@property (nonatomic, readonly) NSUInteger indexInQueue;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) NSTimeInterval timeOffset;
@property (nonatomic, readonly) NSTimeInterval skipOffset;
@property (nonatomic, readonly, copy) NSString * _Nullable position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl clientType:(BMPAdSourceType)clientType indexInQueue:(NSUInteger)indexInQueue duration:(NSTimeInterval)duration timeOffset:(NSTimeInterval)timeOffset skipOffset:(NSTimeInterval)skipOffset position:(NSString * _Nullable)position ad:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad SWIFT_UNAVAILABLE;
@end

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPRemoteControlConfiguration;
@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







@interface NSFileManager (SWIFT_EXTENSION(BitmovinPlayer))
- (NSArray<NSString *> * _Nonnull)_bmp_findPlaylistsAtContentLocation:(NSURL * _Nonnull)contentLocation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("LiveConfiguration")
@interface BMPLiveConfiguration : BMPConfiguration
/// The minimum buffer depth of a stream needed to enable time shifting.
/// When the internal value for the maximal possible timeshift is lower than this value, timeshifting should be
/// disabled. That means Player.maxTimeShift returns 0 in that case.
/// This value should always be non-positive value, default value is -40
@property (nonatomic) NSTimeInterval minTimeshiftBufferDepth;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSString (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, strong) NSString * _Nonnull bmp_md5;
@end




@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer26PictureInPictureEnterEvent")
@interface PictureInPictureEnterEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer28PictureInPictureEnteredEvent")
@interface PictureInPictureEnteredEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer25PictureInPictureExitEvent")
@interface PictureInPictureExitEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer27PictureInPictureExitedEvent")
@interface PictureInPictureExitedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, BMPPlaybackStartBehaviour, "PlaybackStartBehaviour", open) {
/// Starts playback when enough media data is buffered and continuous playback without stalling can be ensured.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourRelaxed = 0,
/// When the buffer is not empty, this setting will cause the player to start playback of
/// available media immediately.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourAggressive = 1,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("ScalingModeChangedEvent")
@interface BMPScalingModeChangedEvent : BMPPlayerEvent
/// The old scaling mode value
@property (nonatomic, readonly) BMPScalingMode from;
/// The new scaling mode value
@property (nonatomic, readonly) BMPScalingMode to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The seek target time interval in seconds.
@property (nonatomic, readonly) NSTimeInterval seekTarget;
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position seekTarget:(NSTimeInterval)seekTarget OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPSourceItem (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, copy) NSString * _Nullable bmp_uniqueIdentifier;
@property (nonatomic, readonly, copy) NSURL * _Nullable bmp_sourceUrlForDownload;
@property (nonatomic, readonly) BOOL bmp_canBeDownloaded;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadedEvent")
@interface BMPSourceLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPSourceItem * _Nonnull sourceItem;
@property (nonatomic, readonly) BMPMediaSourceType streamType;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem streamType:(BMPMediaSourceType)streamType OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadedEvent")
@interface BMPSourceUnloadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceWillUnloadEvent")
@interface BMPSourceWillUnloadEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfiguration#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BMPUnstallingBehaviour : NSUInteger;

SWIFT_CLASS_NAMED("TweaksConfiguration")
@interface BMPTweaksConfiguration : BMPConfiguration
/// If enabled, HLS playlists would be parsed and corresponding events carrying segment-specific metadata,
/// e.g. <code>#EXT-X-SCTE35</code> tag if present in the manifest, are going to be sent.
/// Default is <code>false</code>.
@property (nonatomic) BOOL isNativeHlsParsingEnabled;
/// :nodoc:
@property (nonatomic) BOOL nativeHlsParsingEnabled;
/// If enabled, playlists will be downloaded by the Bitmovin Player SDK instead of <code>AVFoundation</code>.
/// If set to <code>false</code>, enabling <code>nativeHlsParsingEnabled</code> won’t have any effect.
/// Default is <code>true</code>.
@property (nonatomic) BOOL isCustomHlsLoadingEnabled;
/// :nodoc:
@property (nonatomic) BOOL customHlsLoadingEnabled;
/// The frequency in seconds <code>PlayerListener#onTimeChanged</code> is called with <code>TimeChangedEvents</code>.
/// Default is 1. Minimum is 0.025.
@property (nonatomic) NSTimeInterval timeChangedInterval;
/// When duration for subtitle tracks mismatch between
/// the HLS manifest and the subtitle track, this can cause the player to get stalled or prevent it from
/// rendering subtitles after seeking. This can be avoided by deselecting subtitles during seeking and reselecting
/// them afterwards.
/// If set to <code>true</code>, active subtitle track will be deselected before seeking and reselected when seeking finished.
/// No subtitle change related events will be fired.
/// If set to false, no changes are applied to subtitle selection on seeking.
/// Default is <code>false</code>.
@property (nonatomic) BOOL disableSubtitleTracksWhileSeeking;
/// Specifies the player behaviour when <code>Player.play</code> is called.
/// Default is <code>PlaybackStartBehaviour.relaxed</code>
/// This setting requires that the <code>PlayerConfiguration</code> is
/// passed to the constructor of the <code>BitmovinPlayer</code> already.
/// Setting/changing this configuration via the <code>PlayerAPI.setup</code> call is not supported.
@property (nonatomic) enum BMPPlaybackStartBehaviour playbackStartBehaviour;
/// Specifies the player behaviour when stalling should be exited.
/// Default is <code>UnstallingBehaviour.relaxed</code>
/// This setting requires that the <code>PlayerConfiguration</code> is
/// passed to the constructor of the <code>BitmovinPlayer</code> already.
/// Setting/changing this configuration via the <code>PlayerAPI.setup</code> call is not supported.
@property (nonatomic) enum BMPUnstallingBehaviour unstallingBehaviour;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM_NAMED(NSUInteger, BMPUnstallingBehaviour, "UnstallingBehaviour", open) {
/// The player will wait until the buffer is filled that it can, most likely,
/// ensure continuous playback without another stalling right after playback continued.
  BMPUnstallingBehaviourRelaxed = 0,
/// The player will try to unstall as soon as some media data became available and will
/// start playback of this media immediately.
  BMPUnstallingBehaviourAggressive = 1,
};


@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end

@protocol _BMPCaptionHandlerDelegate;
@class BMPSubtitleTrack;
@protocol _BMPConfigurationService;
@class _BMPAVPlayer;

SWIFT_CLASS_NAMED("_AVPlayerCaptionHandler")
@interface _BMPAVPlayerCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService player:(_BMPAVPlayer * _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPAVPlayerItem;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class AVMediaSelectionOption;
@class AVMediaSelectionGroup;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willSeekToTargetTime:(CMTime)seekTarget;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didSeekWithSuccess:(BOOL)finished;
@end


SWIFT_PROTOCOL_NAMED("_CaptionHandler")
@protocol _BMPCaptionHandler
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
/// note:
/// no-op when the passed subtitle is already active
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
/// note:
/// no-op when no subtitle is currently active
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayerViewController;

SWIFT_PROTOCOL_NAMED("_AVPlayerViewControllerListener")
@protocol _BMPAVPlayerViewControllerListener
@optional
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController willTransitionToVisibilityOfTransportBar:(BOOL)visible;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
@end


/// Helper class to map the single delegate pattern to a multi listener pattern
SWIFT_CLASS_NAMED("_AVPlayerViewControllerProxy")
@interface _BMPAVPlayerViewControllerProxy : NSObject
@property (nonatomic, readonly, strong) AVPlayerViewController * _Nonnull avPlayerViewController;
- (nonnull instancetype)initWithAvPlayerViewController:(AVPlayerViewController * _Nonnull)avPlayerViewController OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)addListener:(id <_BMPAVPlayerViewControllerListener> _Nonnull)listener;
- (void)removeListener:(id <_BMPAVPlayerViewControllerListener> _Nonnull)listener;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPAVPlayerViewControllerProxy (SWIFT_EXTENSION(BitmovinPlayer)) <AVPlayerViewControllerDelegate>
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController failedToStartPictureInPictureWithError:(NSError * _Nonnull)error;
@end

@class UIView;
@class UIViewController;

@interface _BMPAVPlayerViewControllerProxy (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic) AVLayerVideoGravity _Nonnull videoGravity;
@property (nonatomic, strong) UIView * _Nonnull view;
@property (nonatomic) BOOL showsPlaybackControls;
- (void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
- (void)removeFromParentViewController;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@end

@class _BMPPersistentArchive;

/// Handles the interaction with the archive where we store metadata about the offline content.
/// In addition it provides URLs which are needed from time to time.
SWIFT_PROTOCOL_NAMED("_ArchiveHelper")
@protocol _BMPArchiveHelper
@property (nonatomic, readonly, strong) _BMPPersistentArchive * _Nullable archive;
/// The URL to the directory where the archive / plist file is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentDirectoryUrl;
/// The URL to the MOVPKG aka the downloaded video / content
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentUrl;
/// Convenience method to check if we have stored content
@property (nonatomic, readonly) BOOL isStored;
@end

@protocol _BMPLogger;

SWIFT_CLASS_NAMED("_ArchiveHelperFactory")
@interface _BMPArchiveHelperFactory : NSObject
+ (id <_BMPArchiveHelper> _Nonnull)createForSourceItem:(BMPSourceItem * _Nonnull)sourceItem withLogger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>_AutoPlayHandler</code> is responsible of handling auto play when it is configured
SWIFT_PROTOCOL_NAMED("_AutoPlayHandler")
@protocol _BMPAutoPlayHandler
@end

@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVPlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_CafSourceOptions")
@interface _BMPCafSourceOptions : NSObject
- (nonnull instancetype)initWithSendManifestRequestsWithCredentials:(BOOL)sendManifestRequestsWithCredentials sendSegmentRequestsWithCredentials:(BOOL)sendSegmentRequestsWithCredentials OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPPlayerConfiguration;
@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPInternalReadyEvent;

@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end

@protocol BMPPlayerAPI;
@protocol BMPPlayerEventHandler;
@protocol BMPRemoteControlAPI;

SWIFT_CLASS_NAMED("_DefaultAutoPlayHandler")
@interface _BMPDefaultAutoPlayHandler : NSObject <_BMPAutoPlayHandler>
- (nonnull instancetype)initWithPlayer:(id <BMPPlayerAPI> _Nonnull)player eventHandler:(id <BMPPlayerEventHandler> _Nonnull)eventHandler remoteControl:(id <BMPRemoteControlAPI> _Nonnull)remoteControl configurationService:(id <_BMPConfigurationService> _Nonnull)configurationService playbackStartBehaviour:(enum BMPPlaybackStartBehaviour)playbackStartBehaviour OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPInternalBufferLevelChangedEvent;

@interface _BMPDefaultAutoPlayHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event;
- (void)onInternalBufferLevelChanged:(_BMPInternalBufferLevelChangedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSValue;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeLoadedTimeRanges:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onReady:(BMPReadyEvent * _Nonnull)event;
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <BMPPlayerListener, _BMPConfigurationService>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_EventEmitter")
@protocol _BMPEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end


SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
- (void)start;
- (void)stop;
@end


SWIFT_PROTOCOL_NAMED("_PictureInPictureService")
@protocol _BMPPictureInPictureService
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
@end

@class AVPictureInPictureController;
@protocol BMPUserInterfaceListener;

SWIFT_CLASS_NAMED("_DefaultPictureInPictureService")
@interface _BMPDefaultPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (nonnull instancetype)initWithPictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <AVPictureInPictureControllerDelegate>
- (void)pictureInPictureControllerWillStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerWillStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end


SWIFT_CLASS_NAMED("_DefaultResourceLoaderService")
@interface _BMPDefaultResourceLoaderService : _BMPDefaultService <_BMPResourceLoaderService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;
@class AVAssetResourceRenewalRequest;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPFairplayHandler;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPFairplayHandlerDelegate>
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishWithError:(NSError * _Nonnull)error;
@end

@class _BMPBitmovinResourceLoader;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBitmovinResourceLoaderDelegate>
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingMasterPlaylistData:(NSData * _Nonnull)masterData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingVariantPlaylistData:(NSData * _Nonnull)variantData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingPlaylistWithError:(NSError * _Nonnull)error;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyData:(NSData * _Nonnull)keyData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyWithError:(NSError * _Nonnull)error;
@end

@class AVPlayerLayer;

SWIFT_CLASS_NAMED("_DefaultScalingModeService")
@interface _BMPDefaultScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerLayer:(AVPlayerLayer * _Nonnull)avPlayerLayer uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ScalingModeService")
@protocol _BMPScalingModeService
@property (nonatomic) BMPScalingMode scalingMode;
@end


@interface _BMPDefaultScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event;
@end


/// Helper class to handle view ordering when needed
/// Desired view hierarchy is: (top to bottom)
/// <ul>
///   <li>
///     PlayerView (BitmovinPlayer UI or System UI)
///   </li>
///   <li>
///     PosterView (only available on iOS)
///   </li>
///   <li>
///     ShutterView (only available on iOS)
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("_ViewHierarchyHandler")
@protocol _BMPViewHierarchyHandler
@property (nonatomic, strong) UIView * _Nullable shutterView;
@property (nonatomic, strong) UIView * _Nullable posterView;
@property (nonatomic, strong) UIView * _Nullable playerView;
- (void)handleSubViewOrdering;
@end


SWIFT_CLASS_NAMED("_DefaultViewHierarchyHandler")
@interface _BMPDefaultViewHierarchyHandler : NSObject <_BMPViewHierarchyHandler>
@property (nonatomic, weak) UIView * _Nullable shutterView;
@property (nonatomic, weak) UIView * _Nullable posterView;
@property (nonatomic, weak) UIView * _Nullable playerView;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView OBJC_DESIGNATED_INITIALIZER;
- (void)handleSubViewOrdering;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("_ExternalCaptionHandler")
@interface _BMPExternalCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService deficiencyService:(id <_BMPDeficiencyService> _Nonnull)deficiencyService eventEmitter:(id <_BMPEventEmitter> _Nonnull)eventEmitter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPExternalCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListenerInternal.h for more information on this event.
SWIFT_CLASS_NAMED("_InternalBufferLevelChangedEvent")
@interface _BMPInternalBufferLevelChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPBufferLevel * _Nonnull forwardBufferLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("_InternalCastReadyEvent")
@interface _BMPInternalCastReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata options:(_BMPCafSourceOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end




SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("_ShutterController")
@interface _BMPShutterController : NSObject
@property (nonatomic, unsafe_unretained) id <BMPPlayerAPI, BMPPlayerEventHandler> _Nonnull player;
@property (nonatomic, readonly, strong) UIView * _Nonnull shutterView;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayerAPI, BMPPlayerEventHandler> _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPPlayingEvent;

@interface _BMPShutterController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onUnseen:(NSArray<BMPPlayerEvent *> * _Nonnull)unseenEvents;
- (void)onPlaying:(BMPPlayingEvent * _Nonnull)event;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
@end

@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SystemUiPictureInPictureService")
@interface _BMPSystemUiPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (nonnull instancetype)initWithAvPlayerViewControllerProxy:(_BMPAVPlayerViewControllerProxy * _Nonnull)avPlayerViewControllerProxy uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter logger:(id <_BMPLogger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSystemUiPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerViewControllerListener>
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
@end


SWIFT_CLASS_NAMED("_SystemUiScalingModeService")
@interface _BMPSystemUiScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerViewControllerProxy:(_BMPAVPlayerViewControllerProxy * _Nonnull)avPlayerViewControllerProxy uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSystemUiScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerViewControllerListener>
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
@end


@interface _BMPSystemUiScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_UIDeviceVersionHelper")
@interface _BMPUIDeviceVersionHelper : NSObject
- (nonnull instancetype)init;
- (BOOL)isSystemVersionGreaterThanOrEqual:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSystemVersionLessThan:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import AVKit;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol BMPAdBreak;

/// Base class for ad break related event classes.
SWIFT_CLASS_NAMED("AdBreakEvent")
@interface BMPAdBreakEvent : BMPPlayerEvent
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nonnull adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdBreakFinishedEvent")
@interface BMPAdBreakFinishedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdBreakStartedEvent")
@interface BMPAdBreakStartedEvent : BMPAdBreakEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdBreak:(id <BMPAdBreak> _Nonnull)adBreak OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdClickedEvent")
@interface BMPAdClickedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ErrorEvent")
@interface BMPErrorEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSUInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithCode:(NSUInteger)code message:(NSString * _Nonnull)message OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPAdItem;
@protocol BMPAdConfig;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdErrorEvent")
@interface BMPAdErrorEvent : BMPErrorEvent
@property (nonatomic, readonly, strong) BMPAdItem * _Nullable adItem;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdItem:(BMPAdItem * _Nullable)adItem code:(NSUInteger)code message:(NSString * _Nonnull)message adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCode:(NSUInteger)code message:(NSString * _Nonnull)message SWIFT_UNAVAILABLE;
@end

@protocol BMPAd;

/// Base class for ad related event classes.
SWIFT_CLASS_NAMED("AdEvent")
@interface BMPAdEvent : BMPPlayerEvent
/// Returns the <code>Ad</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAd> _Nonnull ad;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdFinishedEvent")
@interface BMPAdFinishedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadEvent")
@interface BMPAdManifestLoadEvent : BMPPlayerEvent
/// Returns the <code>AdConfig</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAdConfig:(id <BMPAdConfig> _Nullable)adConfig adBreak:(id <BMPAdBreak> _Nullable)adBreak OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdManifestLoadedEvent")
@interface BMPAdManifestLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly, strong) id <BMPAdConfig> _Nullable adConfig;
/// Returns the <code>AdBreak</code> this event is related to.
@property (nonatomic, readonly, strong) id <BMPAdBreak> _Nullable adBreak;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDownloadTime:(NSTimeInterval)downloadTime adBreak:(id <BMPAdBreak> _Nullable)adBreak adConfig:(id <BMPAdConfig> _Nullable)adConfig OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdSkippedEvent")
@interface BMPAdSkippedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AdStartedEvent")
@interface BMPAdStartedEvent : BMPAdEvent
@property (nonatomic, readonly, copy) NSURL * _Nullable clickThroughUrl;
@property (nonatomic, readonly) BMPAdSourceType clientType;
@property (nonatomic, readonly) NSUInteger indexInQueue;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) NSTimeInterval timeOffset;
@property (nonatomic, readonly) NSTimeInterval skipOffset;
@property (nonatomic, readonly, copy) NSString * _Nullable position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithClickThroughUrl:(NSURL * _Nullable)clickThroughUrl clientType:(BMPAdSourceType)clientType indexInQueue:(NSUInteger)indexInQueue duration:(NSTimeInterval)duration timeOffset:(NSTimeInterval)timeOffset skipOffset:(NSTimeInterval)skipOffset position:(NSString * _Nullable)position ad:(id <BMPAd> _Nonnull)ad OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithAd:(id <BMPAd> _Nonnull)ad SWIFT_UNAVAILABLE;
@end

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPRemoteControlConfiguration;
@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







@interface NSFileManager (SWIFT_EXTENSION(BitmovinPlayer))
- (NSArray<NSString *> * _Nonnull)_bmp_findPlaylistsAtContentLocation:(NSURL * _Nonnull)contentLocation SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("LiveConfiguration")
@interface BMPLiveConfiguration : BMPConfiguration
/// The minimum buffer depth of a stream needed to enable time shifting.
/// When the internal value for the maximal possible timeshift is lower than this value, timeshifting should be
/// disabled. That means Player.maxTimeShift returns 0 in that case.
/// This value should always be non-positive value, default value is -40
@property (nonatomic) NSTimeInterval minTimeshiftBufferDepth;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSString (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, strong) NSString * _Nonnull bmp_md5;
@end




@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer26PictureInPictureEnterEvent")
@interface PictureInPictureEnterEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer28PictureInPictureEnteredEvent")
@interface PictureInPictureEnteredEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer25PictureInPictureExitEvent")
@interface PictureInPictureExitEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS("_TtC14BitmovinPlayer27PictureInPictureExitedEvent")
@interface PictureInPictureExitedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM_NAMED(NSUInteger, BMPPlaybackStartBehaviour, "PlaybackStartBehaviour", open) {
/// Starts playback when enough media data is buffered and continuous playback without stalling can be ensured.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourRelaxed = 0,
/// When the buffer is not empty, this setting will cause the player to start playback of
/// available media immediately.
/// If insufficient media data is buffered for playback to start, the player will act as if the buffer
/// became empty during playback.
  BMPPlaybackStartBehaviourAggressive = 1,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




/// See BMPUserInterfaceListener.h for more information on this event.
SWIFT_CLASS_NAMED("ScalingModeChangedEvent")
@interface BMPScalingModeChangedEvent : BMPPlayerEvent
/// The old scaling mode value
@property (nonatomic, readonly) BMPScalingMode from;
/// The new scaling mode value
@property (nonatomic, readonly) BMPScalingMode to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The seek target time interval in seconds.
@property (nonatomic, readonly) NSTimeInterval seekTarget;
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position seekTarget:(NSTimeInterval)seekTarget OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPSourceItem (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly, copy) NSString * _Nullable bmp_uniqueIdentifier;
@property (nonatomic, readonly, copy) NSURL * _Nullable bmp_sourceUrlForDownload;
@property (nonatomic, readonly) BOOL bmp_canBeDownloaded;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadedEvent")
@interface BMPSourceLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPSourceItem * _Nonnull sourceItem;
@property (nonatomic, readonly) BMPMediaSourceType streamType;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem streamType:(BMPMediaSourceType)streamType OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadedEvent")
@interface BMPSourceUnloadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceWillUnloadEvent")
@interface BMPSourceWillUnloadEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) BMPUserInterfaceType userInterfaceType;
/// Set the CSS file that will be used for the UI. The default CSS file will be completely replaced by the CSS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Set a CSS file which contains supplemental styles for the player UI.
/// These styles will be added to the default CSS
/// file or the CSS file set with StyleConfiguration#playerUiCss.
@property (nonatomic, copy) NSURL * _Nullable supplementalPlayerUiCss SWIFT_AVAILABILITY(tvos,unavailable);
/// Sets the JS file that will be used for the UI. The default JS file will be completely replaced by the JS file
/// set with this property.
@property (nonatomic, copy) NSURL * _Nonnull playerUiJs SWIFT_AVAILABILITY(tvos,unavailable);
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum BMPUnstallingBehaviour : NSUInteger;

SWIFT_CLASS_NAMED("TweaksConfiguration")
@interface BMPTweaksConfiguration : BMPConfiguration
/// If enabled, HLS playlists would be parsed and corresponding events carrying segment-specific metadata,
/// e.g. <code>#EXT-X-SCTE35</code> tag if present in the manifest, are going to be sent.
/// Default is <code>false</code>.
@property (nonatomic) BOOL isNativeHlsParsingEnabled;
/// :nodoc:
@property (nonatomic) BOOL nativeHlsParsingEnabled;
/// If enabled, playlists will be downloaded by the Bitmovin Player SDK instead of <code>AVFoundation</code>.
/// If set to <code>false</code>, enabling <code>nativeHlsParsingEnabled</code> won’t have any effect.
/// Default is <code>true</code>.
@property (nonatomic) BOOL isCustomHlsLoadingEnabled;
/// :nodoc:
@property (nonatomic) BOOL customHlsLoadingEnabled;
/// The frequency in seconds <code>PlayerListener#onTimeChanged</code> is called with <code>TimeChangedEvents</code>.
/// Default is 1. Minimum is 0.025.
@property (nonatomic) NSTimeInterval timeChangedInterval;
/// When duration for subtitle tracks mismatch between
/// the HLS manifest and the subtitle track, this can cause the player to get stalled or prevent it from
/// rendering subtitles after seeking. This can be avoided by deselecting subtitles during seeking and reselecting
/// them afterwards.
/// If set to <code>true</code>, active subtitle track will be deselected before seeking and reselected when seeking finished.
/// No subtitle change related events will be fired.
/// If set to false, no changes are applied to subtitle selection on seeking.
/// Default is <code>false</code>.
@property (nonatomic) BOOL disableSubtitleTracksWhileSeeking;
/// Specifies the player behaviour when <code>Player.play</code> is called.
/// Default is <code>PlaybackStartBehaviour.relaxed</code>
/// This setting requires that the <code>PlayerConfiguration</code> is
/// passed to the constructor of the <code>BitmovinPlayer</code> already.
/// Setting/changing this configuration via the <code>PlayerAPI.setup</code> call is not supported.
@property (nonatomic) enum BMPPlaybackStartBehaviour playbackStartBehaviour;
/// Specifies the player behaviour when stalling should be exited.
/// Default is <code>UnstallingBehaviour.relaxed</code>
/// This setting requires that the <code>PlayerConfiguration</code> is
/// passed to the constructor of the <code>BitmovinPlayer</code> already.
/// Setting/changing this configuration via the <code>PlayerAPI.setup</code> call is not supported.
@property (nonatomic) enum BMPUnstallingBehaviour unstallingBehaviour;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end



typedef SWIFT_ENUM_NAMED(NSUInteger, BMPUnstallingBehaviour, "UnstallingBehaviour", open) {
/// The player will wait until the buffer is filled that it can, most likely,
/// ensure continuous playback without another stalling right after playback continued.
  BMPUnstallingBehaviourRelaxed = 0,
/// The player will try to unstall as soon as some media data became available and will
/// start playback of this media immediately.
  BMPUnstallingBehaviourAggressive = 1,
};


@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfigWithRemoteControlConfig:(BMPRemoteControlConfiguration * _Nonnull)remoteControlConfig SWIFT_WARN_UNUSED_RESULT;
@end

@protocol _BMPCaptionHandlerDelegate;
@class BMPSubtitleTrack;
@protocol _BMPConfigurationService;
@class _BMPAVPlayer;

SWIFT_CLASS_NAMED("_AVPlayerCaptionHandler")
@interface _BMPAVPlayerCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService player:(_BMPAVPlayer * _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPAVPlayerItem;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class AVMediaSelectionOption;
@class AVMediaSelectionGroup;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willSeekToTargetTime:(CMTime)seekTarget;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didSeekWithSuccess:(BOOL)finished;
@end


SWIFT_PROTOCOL_NAMED("_CaptionHandler")
@protocol _BMPCaptionHandler
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
/// note:
/// no-op when the passed subtitle is already active
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
/// note:
/// no-op when no subtitle is currently active
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayerViewController;

SWIFT_PROTOCOL_NAMED("_AVPlayerViewControllerListener")
@protocol _BMPAVPlayerViewControllerListener
@optional
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController willTransitionToVisibilityOfTransportBar:(BOOL)visible;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
@end


/// Helper class to map the single delegate pattern to a multi listener pattern
SWIFT_CLASS_NAMED("_AVPlayerViewControllerProxy")
@interface _BMPAVPlayerViewControllerProxy : NSObject
@property (nonatomic, readonly, strong) AVPlayerViewController * _Nonnull avPlayerViewController;
- (nonnull instancetype)initWithAvPlayerViewController:(AVPlayerViewController * _Nonnull)avPlayerViewController OBJC_DESIGNATED_INITIALIZER;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)addListener:(id <_BMPAVPlayerViewControllerListener> _Nonnull)listener;
- (void)removeListener:(id <_BMPAVPlayerViewControllerListener> _Nonnull)listener;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPAVPlayerViewControllerProxy (SWIFT_EXTENSION(BitmovinPlayer)) <AVPlayerViewControllerDelegate>
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController failedToStartPictureInPictureWithError:(NSError * _Nonnull)error;
@end

@class UIView;
@class UIViewController;

@interface _BMPAVPlayerViewControllerProxy (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic) AVLayerVideoGravity _Nonnull videoGravity;
@property (nonatomic, strong) UIView * _Nonnull view;
@property (nonatomic) BOOL showsPlaybackControls;
- (void)willMoveToParentViewController:(UIViewController * _Nullable)parent;
- (void)removeFromParentViewController;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
@end

@class _BMPPersistentArchive;

/// Handles the interaction with the archive where we store metadata about the offline content.
/// In addition it provides URLs which are needed from time to time.
SWIFT_PROTOCOL_NAMED("_ArchiveHelper")
@protocol _BMPArchiveHelper
@property (nonatomic, readonly, strong) _BMPPersistentArchive * _Nullable archive;
/// The URL to the directory where the archive / plist file is stored
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentDirectoryUrl;
/// The URL to the MOVPKG aka the downloaded video / content
@property (nonatomic, readonly, copy) NSURL * _Nullable offlineContentUrl;
/// Convenience method to check if we have stored content
@property (nonatomic, readonly) BOOL isStored;
@end

@protocol _BMPLogger;

SWIFT_CLASS_NAMED("_ArchiveHelperFactory")
@interface _BMPArchiveHelperFactory : NSObject
+ (id <_BMPArchiveHelper> _Nonnull)createForSourceItem:(BMPSourceItem * _Nonnull)sourceItem withLogger:(id <_BMPLogger> _Nonnull)logger SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// <code>_AutoPlayHandler</code> is responsible of handling auto play when it is configured
SWIFT_PROTOCOL_NAMED("_AutoPlayHandler")
@protocol _BMPAutoPlayHandler
@end

@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVPlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_CafSourceOptions")
@interface _BMPCafSourceOptions : NSObject
- (nonnull instancetype)initWithSendManifestRequestsWithCredentials:(BOOL)sendManifestRequestsWithCredentials sendSegmentRequestsWithCredentials:(BOOL)sendSegmentRequestsWithCredentials OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class BMPPlayerConfiguration;
@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPInternalReadyEvent;

@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end

@protocol BMPPlayerAPI;
@protocol BMPPlayerEventHandler;
@protocol BMPRemoteControlAPI;

SWIFT_CLASS_NAMED("_DefaultAutoPlayHandler")
@interface _BMPDefaultAutoPlayHandler : NSObject <_BMPAutoPlayHandler>
- (nonnull instancetype)initWithPlayer:(id <BMPPlayerAPI> _Nonnull)player eventHandler:(id <BMPPlayerEventHandler> _Nonnull)eventHandler remoteControl:(id <BMPRemoteControlAPI> _Nonnull)remoteControl configurationService:(id <_BMPConfigurationService> _Nonnull)configurationService playbackStartBehaviour:(enum BMPPlaybackStartBehaviour)playbackStartBehaviour OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPInternalBufferLevelChangedEvent;

@interface _BMPDefaultAutoPlayHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalReady:(_BMPInternalReadyEvent * _Nonnull)event;
- (void)onInternalBufferLevelChanged:(_BMPInternalBufferLevelChangedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSValue;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeLoadedTimeRanges:(NSArray<NSValue *> * _Nonnull)loadedTimeRanges;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onReady:(BMPReadyEvent * _Nonnull)event;
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <BMPPlayerListener, _BMPConfigurationService>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_EventEmitter")
@protocol _BMPEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)emitEvent:(BMPPlayerEvent * _Nonnull)event;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end


SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)unload;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
- (void)start;
- (void)stop;
@end


SWIFT_PROTOCOL_NAMED("_PictureInPictureService")
@protocol _BMPPictureInPictureService
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
@end

@class AVPictureInPictureController;
@protocol BMPUserInterfaceListener;

SWIFT_CLASS_NAMED("_DefaultPictureInPictureService")
@interface _BMPDefaultPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (nonnull instancetype)initWithPictureInPictureController:(AVPictureInPictureController * _Nonnull)pictureInPictureController uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <AVPictureInPictureControllerDelegate>
- (void)pictureInPictureControllerWillStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStartPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerWillStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
- (void)pictureInPictureControllerDidStopPictureInPicture:(AVPictureInPictureController * _Nonnull)pictureInPictureController;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end


SWIFT_CLASS_NAMED("_DefaultResourceLoaderService")
@interface _BMPDefaultResourceLoaderService : _BMPDefaultService <_BMPResourceLoaderService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator;
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AVAssetResourceLoader;
@class AVAssetResourceLoadingRequest;
@class AVAssetResourceRenewalRequest;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <AVAssetResourceLoaderDelegate>
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForLoadingOfRequestedResource:(AVAssetResourceLoadingRequest * _Nonnull)loadingRequest SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resourceLoader:(AVAssetResourceLoader * _Nonnull)resourceLoader shouldWaitForRenewalOfRequestedResource:(AVAssetResourceRenewalRequest * _Nonnull)renewalRequest SWIFT_WARN_UNUSED_RESULT;
@end

@class _BMPFairplayHandler;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPFairplayHandlerDelegate>
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMLicenseRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishDRMCertificateRequestWithMetadata:(_BMPRequestMetadata * _Nonnull)metadata;
- (void)fairplayHandler:(_BMPFairplayHandler * _Nonnull)sender didFinishWithError:(NSError * _Nonnull)error;
@end

@class _BMPBitmovinResourceLoader;

@interface _BMPDefaultResourceLoaderService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBitmovinResourceLoaderDelegate>
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingMasterPlaylistData:(NSData * _Nonnull)masterData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingVariantPlaylistData:(NSData * _Nonnull)variantData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingPlaylistWithError:(NSError * _Nonnull)error;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyData:(NSData * _Nonnull)keyData requestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
- (void)bitmovinResourceLoader:(_BMPBitmovinResourceLoader * _Nonnull)sender didFinishLoadingAesKeyWithError:(NSError * _Nonnull)error;
@end

@class AVPlayerLayer;

SWIFT_CLASS_NAMED("_DefaultScalingModeService")
@interface _BMPDefaultScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerLayer:(AVPlayerLayer * _Nonnull)avPlayerLayer uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ScalingModeService")
@protocol _BMPScalingModeService
@property (nonatomic) BMPScalingMode scalingMode;
@end


@interface _BMPDefaultScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event;
@end


/// Helper class to handle view ordering when needed
/// Desired view hierarchy is: (top to bottom)
/// <ul>
///   <li>
///     PlayerView (BitmovinPlayer UI or System UI)
///   </li>
///   <li>
///     PosterView (only available on iOS)
///   </li>
///   <li>
///     ShutterView (only available on iOS)
///   </li>
/// </ul>
SWIFT_PROTOCOL_NAMED("_ViewHierarchyHandler")
@protocol _BMPViewHierarchyHandler
@property (nonatomic, strong) UIView * _Nullable shutterView;
@property (nonatomic, strong) UIView * _Nullable posterView;
@property (nonatomic, strong) UIView * _Nullable playerView;
- (void)handleSubViewOrdering;
@end


SWIFT_CLASS_NAMED("_DefaultViewHierarchyHandler")
@interface _BMPDefaultViewHierarchyHandler : NSObject <_BMPViewHierarchyHandler>
@property (nonatomic, weak) UIView * _Nullable shutterView;
@property (nonatomic, weak) UIView * _Nullable posterView;
@property (nonatomic, weak) UIView * _Nullable playerView;
- (nonnull instancetype)initWithParentView:(UIView * _Nonnull)parentView OBJC_DESIGNATED_INITIALIZER;
- (void)handleSubViewOrdering;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("_ExternalCaptionHandler")
@interface _BMPExternalCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService deficiencyService:(id <_BMPDeficiencyService> _Nonnull)deficiencyService eventEmitter:(id <_BMPEventEmitter> _Nonnull)eventEmitter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPExternalCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


/// Data class which holds IMA Log entry values
SWIFT_CLASS_NAMED("_ImaAdLogEvent")
@interface _BMPImaAdLogEvent : NSObject
@property (nonatomic, readonly) NSInteger errorCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull errorMessage;
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
- (nonnull instancetype)initWithErrorCode:(NSInteger)errorCode errorMessage:(NSString * _Nonnull)errorMessage type:(NSString * _Nonnull)type OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// See BMPPlayerListenerInternal.h for more information on this event.
SWIFT_CLASS_NAMED("_InternalBufferLevelChangedEvent")
@interface _BMPInternalBufferLevelChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPBufferLevel * _Nonnull forwardBufferLevel;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("_InternalCastReadyEvent")
@interface _BMPInternalCastReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata options:(_BMPCafSourceOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end




SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS_NAMED("_ShutterController")
@interface _BMPShutterController : NSObject
@property (nonatomic, unsafe_unretained) id <BMPPlayerAPI, BMPPlayerEventHandler> _Nonnull player;
@property (nonatomic, readonly, strong) UIView * _Nonnull shutterView;
- (nonnull instancetype)initWithPlayer:(id <BMPPlayerAPI, BMPPlayerEventHandler> _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPPlayingEvent;

@interface _BMPShutterController (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onUnseen:(NSArray<BMPPlayerEvent *> * _Nonnull)unseenEvents;
- (void)onPlaying:(BMPPlayingEvent * _Nonnull)event;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event;
@end

@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_SystemUiPictureInPictureService")
@interface _BMPSystemUiPictureInPictureService : NSObject <_BMPPictureInPictureService>
@property (nonatomic, readonly) BOOL isPictureInPicture;
- (nonnull instancetype)initWithAvPlayerViewControllerProxy:(_BMPAVPlayerViewControllerProxy * _Nonnull)avPlayerViewControllerProxy uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter logger:(id <_BMPLogger> _Nonnull)logger OBJC_DESIGNATED_INITIALIZER;
- (void)enterPictureInPicture;
- (void)exitPictureInPicture;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSystemUiPictureInPictureService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerViewControllerListener>
- (void)playerViewControllerWillStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerWillStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerDidStopPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
- (void)playerViewControllerFailedToStartPictureInPicture:(AVPlayerViewController * _Nonnull)playerViewController;
@end


SWIFT_CLASS_NAMED("_SystemUiScalingModeService")
@interface _BMPSystemUiScalingModeService : NSObject
- (nonnull instancetype)initWithAvPlayerViewControllerProxy:(_BMPAVPlayerViewControllerProxy * _Nonnull)avPlayerViewControllerProxy uiEventEmitter:(id <BMPUserInterfaceListener> _Nonnull)uiEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPSystemUiScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerViewControllerListener>
- (void)playerViewController:(AVPlayerViewController * _Nonnull)playerViewController didChangeVideoGravity:(AVLayerVideoGravity _Nonnull)oldVideoGravity newVideoGravity:(AVLayerVideoGravity _Nonnull)newVideoGravity;
@end


@interface _BMPSystemUiScalingModeService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPScalingModeService>
@property (nonatomic) BMPScalingMode scalingMode;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_UIDeviceVersionHelper")
@interface _BMPUIDeviceVersionHelper : NSObject
- (nonnull instancetype)init;
- (BOOL)isSystemVersionGreaterThanOrEqual:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSystemVersionLessThan:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
#endif

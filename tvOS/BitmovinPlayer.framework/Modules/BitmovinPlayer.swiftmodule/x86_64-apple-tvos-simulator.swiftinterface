// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
// swift-module-flags: -target x86_64-apple-tvos10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BitmovinPlayer
@_exported import BitmovinPlayer
import Foundation
import Swift
@_inheritsConvenienceInitializers @objc(BMPDestroyEvent) final public class DestroyEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(BMPReadyEvent) final public class ReadyEvent : BitmovinPlayer.PlayerEvent {
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc(_BMPDefaultEventEmitter) public class _DefaultEventEmitter : BitmovinPlayer._DefaultService, BitmovinPlayer._EventEmitter {
  @objc override dynamic public var type: BitmovinPlayer._BMPServiceType {
    @objc get
  }
  @objc override dynamic public init()
  @objc public func emit(event: BitmovinPlayer.PlayerEvent)
  @objc deinit
}
extension _DefaultEventEmitter : BitmovinPlayer.PlayerEventHandler {
  @objc dynamic public func add(listener: BitmovinPlayer.PlayerListener)
  @objc dynamic public func remove(listener: BitmovinPlayer.PlayerListener)
}
@objc(_BMPDeficiencyService) public protocol _DeficiencyService : BitmovinPlayer._Service {
  @objc(throwError:) func throwError(code: Swift.Int)
  @objc(throwError:replacements:) func throwError(code: Swift.Int, replacements: [Swift.String]?)
  @objc func throwLicensingErrorNoKey()
  @objc func throwLicensingErrorInvalidDomain()
  @objc func throwManifestNotFoundError(withReason reason: Swift.String?)
  @objc func throwSourceError()
  @objc(throwSourceError:) func throwSourceError(reason: Swift.String?)
  @objc(throwWarning:) func throwWarning(code: Swift.Int)
  @objc(throwWarning:replacements:) func throwWarning(code: Swift.Int, replacements: [Swift.String]?)
}
@objc(_BMPLogLevel) public enum _LogLevel : Swift.Int {
  case verbose = 0
  case info
  case debug
  case warning
  case error
  case none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc(_BMPLogger) public protocol _Logger {
  @objc func log(_ message: Swift.String, level: BitmovinPlayer._LogLevel)
}
@_inheritsConvenienceInitializers @objcMembers @objc(BMPStyleConfiguration) final public class StyleConfiguration : BitmovinPlayer.Configuration {
  @objc final public var isUiEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var uiEnabled: Swift.Bool
  @objc final public var userInterfaceType: BitmovinPlayer.BMPUserInterfaceType
  @objc final public var scalingMode: BitmovinPlayer.BMPScalingMode
  @objc final public var userInterfaceConfiguration: BitmovinPlayer.UserInterfaceConfiguration?
  @objc override dynamic public init()
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPAudioAddedEvent) @objcMembers final public class AudioAddedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let audioTrack: BitmovinPlayer.AudioTrack
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(audioTrack: BitmovinPlayer.AudioTrack, time: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(_BMPEventEmitter) public protocol _EventEmitter : BitmovinPlayer.PlayerEventHandler, BitmovinPlayer._Service {
  @objc(emitEvent:) func emit(event: BitmovinPlayer.PlayerEvent)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(BMPPlayEvent) @objcMembers final public class PlayEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let time: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(time: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
}
@objc(BMPCafDrmConfigConvertible) public protocol _CafDrmConfigConvertible {
  @objc func toCafDrmConfig() -> BitmovinPlayer._CafDrmConfig?
}
extension WidevineConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig() -> BitmovinPlayer._CafDrmConfig?
}
extension ClearKeyConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig() -> BitmovinPlayer._CafDrmConfig?
}
extension PlayReadyConfiguration : BitmovinPlayer._CafDrmConfigConvertible {
  @objc dynamic public func toCafDrmConfig() -> BitmovinPlayer._CafDrmConfig?
}
@objcMembers @objc(_BMPDefaultDeficiencyService) final public class _DefaultDeficiencyService : BitmovinPlayer._DefaultService, BitmovinPlayer._DeficiencyService {
  @objc override final public var type: BitmovinPlayer._BMPServiceType {
    @objc get
  }
  @objc public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator)
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func throwError(code: Swift.Int)
  @objc final public func throwError(code: Swift.Int, replacements: [Swift.String]?)
  @objc final public func throwLicensingErrorNoKey()
  @objc final public func throwLicensingErrorInvalidDomain()
  @objc final public func throwManifestNotFoundError(withReason reason: Swift.String?)
  @objc final public func throwSourceError()
  @objc final public func throwSourceError(reason: Swift.String?)
  @objc final public func throwWarning(code: Swift.Int)
  @objc final public func throwWarning(code: Swift.Int, replacements: [Swift.String]?)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objcMembers @objc(_BMPBitmovinLogger) public class _BitmovinLogger : ObjectiveC.NSObject, BitmovinPlayer._Logger {
  @objc public init(level: BitmovinPlayer._LogLevel)
  @objc override convenience dynamic public init()
  @objc public func log(_ message: Swift.String, level: BitmovinPlayer._LogLevel)
  @objc deinit
}
@objc(BMPCafDrmConfig) @objcMembers final public class _CafDrmConfig : ObjectiveC.NSObject {
  public enum ProtectionSystem : Swift.String {
    case widevine
    case playReady
    case clearKey
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public init(protectionSystem: BitmovinPlayer._CafDrmConfig.ProtectionSystem, licenseUrl: Foundation.URL, headers: [Swift.String : Swift.String]?)
  @objc override dynamic public init()
  @objc deinit
}
@objc(BMPMediaInfoCustomData) @objcMembers final public class _MediaInfoCustomData : ObjectiveC.NSObject {
  @objc public init(drm: BitmovinPlayer._CafDrmConfig)
  @objc final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
public protocol HexConvertible {
  var hexadecimal: Foundation.Data? { get }
  var normalizedHexString: Swift.String { get }
}
extension String : BitmovinPlayer.HexConvertible {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
extension NSString : BitmovinPlayer.HexConvertible {
  public var hexadecimal: Foundation.Data? {
    get
  }
  public var normalizedHexString: Swift.String {
    get
  }
}
@objc(BMPMetadataMessage) @objcMembers final public class _MetadataMessage : ObjectiveC.NSObject {
  @objc public init(receiverVersion: BitmovinPlayer.GoogleCastReceiverVersion, data: [Swift.AnyHashable : Any])
  @objc final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(BMPDrmDataParsedEvent) @objcMembers final public class DrmDataParsedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let data: BitmovinPlayer.DrmData
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(data: BitmovinPlayer.DrmData)
  @objc deinit
  @objc override dynamic public init(jsonData: [Swift.AnyHashable : Any]) throws
}
@objc(BMPDrmData) @objcMembers final public class DrmData : ObjectiveC.NSObject {
  @objc(BMPDrmDataType) public enum DrmDataType : Swift.Int {
    case skdUri
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc final public let data: Foundation.Data
  @objc final public let type: BitmovinPlayer.DrmData.DrmDataType
  @objc public init(data: Foundation.Data, type: BitmovinPlayer.DrmData.DrmDataType)
  @objc convenience public init?(skdUri: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@_hasMissingDesignatedInitializers @objc(BMPDrmRequest) @objcMembers final public class DrmRequest : BitmovinPlayer.HttpRequest {
  @objc final public let drmData: BitmovinPlayer.DrmData
  @objc deinit
  @objc override dynamic public init(url: Foundation.URL, method: Swift.String)
}
@objc extension NSURLRequest {
  @objc dynamic public func _toBitmovinHttpRequest() -> BitmovinPlayer.HttpRequest?
  @objc dynamic public func _toBitmovinDrmRequest(skdUri: Swift.String) -> BitmovinPlayer.DrmRequest?
}
@_hasMissingDesignatedInitializers @objc(BMPDurationChangedEvent) @objcMembers final public class DurationChangedEvent : BitmovinPlayer.PlayerEvent {
  @objc final public let duration: Foundation.TimeInterval
  @objc override final public var name: Swift.String {
    @objc get
  }
  @objc public init(duration: Foundation.TimeInterval)
  @objc override final public func toJsonData() -> [Swift.AnyHashable : Any]
  @objc deinit
  @objc override dynamic public init()
}
@objc(_BMPConfigurationService) public protocol _ConfigurationService : BitmovinPlayer._Service {
  @objc var licenseKey: Swift.String? { get }
  @objc var sdkVersion: Swift.String? { get }
  @objc var packageName: Swift.String? { get }
  @objc var maxTimeShiftThreshold: Foundation.TimeInterval { get }
  @objc var playerConfiguration: BitmovinPlayer.PlayerConfiguration { get }
  @objc var isCurrentSourceRestrictedToCache: Swift.Bool { get }
  @objc var suppressDefaultCaptionRendering: Swift.Bool { get }
  @objc(updatePlayerConfiguration:) func update(playerConfiguration: BitmovinPlayer.PlayerConfiguration)
  @objc(updateSourceConfiguration:) func update(sourceConfiguration: BitmovinPlayer.SourceConfiguration)
}
@objc(_BMPDefaultConfigurationService) final public class _DefaultConfigurationService : BitmovinPlayer._DefaultService, BitmovinPlayer._ConfigurationService, BitmovinPlayer.PlayerListener {
  @objc final public var licenseKey: Swift.String? {
    get
  }
  @objc final public var sdkVersion: Swift.String? {
    get
  }
  @objc final public var packageName: Swift.String? {
    get
  }
  @objc final public var maxTimeShiftThreshold: Foundation.TimeInterval {
    get
  }
  @objc final public var playerConfiguration: BitmovinPlayer.PlayerConfiguration {
    get
  }
  @objc override final public var type: BitmovinPlayer._BMPServiceType {
    @objc get
  }
  @objc final public var isCurrentSourceRestrictedToCache: Swift.Bool {
    @objc get
  }
  @objc final public var suppressDefaultCaptionRendering: Swift.Bool {
    @objc get
  }
  public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator, appBundle: Foundation.Bundle, sdkBundle: Foundation.Bundle)
  @objc(initWithServiceLocator:) convenience public init(serviceLocator: BitmovinPlayer._NamespacedServiceLocator)
  @objc override final public func start()
  @objc override final public func stop()
  @objc final public func update(playerConfiguration: BitmovinPlayer.PlayerConfiguration)
  @objc final public func update(sourceConfiguration: BitmovinPlayer.SourceConfiguration)
  @objc final public func onSourceLoaded(_ event: BitmovinPlayer.SourceLoadedEvent)
  @objc final public func onSourceUnloaded(_ event: BitmovinPlayer.SourceUnloadedEvent)
  @objc deinit
  @objc override dynamic public init()
}
extension BitmovinPlayer._LogLevel : Swift.Equatable {}
extension BitmovinPlayer._LogLevel : Swift.Hashable {}
extension BitmovinPlayer._LogLevel : Swift.RawRepresentable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.Equatable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.Hashable {}
extension BitmovinPlayer._CafDrmConfig.ProtectionSystem : Swift.RawRepresentable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.Equatable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.Hashable {}
extension BitmovinPlayer.DrmData.DrmDataType : Swift.RawRepresentable {}

#ifndef TARGET_OS_SIMULATOR
#include <TargetConditionals.h>
#endif
#if TARGET_OS_SIMULATOR
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_PROTOCOL_NAMED("SourceEvent")
@protocol BMPSourceEvent <BMPEvent>
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) NSTimeInterval duration;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPDurationChangedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <BMPJsonable>
+ (nullable instancetype)fromJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end




@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayerActiveEvent")
@interface BMPPlayerActiveEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPPlayerConfiguration;
@class BMPPlayer;

SWIFT_CLASS_NAMED("PlayerFactory")
@interface BMPPlayerFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a player instance configured via the provided playerConfig.
+ (BMPPlayer * _Nonnull)createWithPlayerConfig:(BMPPlayerConfiguration * _Nonnull)playerConfig SWIFT_WARN_UNUSED_RESULT;
/// Creates a player instance with the default.
+ (BMPPlayer * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayerInactiveEvent")
@interface BMPPlayerInactiveEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BMPSource;

SWIFT_PROTOCOL_NAMED("PlaylistApi")
@protocol BMPPlaylistApi
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
- (void)seekWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
@end

@class BMPPlaylistOptions;

SWIFT_CLASS_NAMED("PlaylistConfiguration")
@interface BMPPlaylistConfiguration : BMPConfiguration
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
@property (nonatomic, readonly, strong) BMPPlaylistOptions * _Nonnull options;
- (nonnull instancetype)initWithSources:(NSArray<id <BMPSource>> * _Nonnull)sources;
- (nonnull instancetype)initWithSources:(NSArray<id <BMPSource>> * _Nonnull)sources options:(BMPPlaylistOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("PlaylistOptions")
@interface BMPPlaylistOptions : NSObject
@property (nonatomic, readonly) BOOL preloadAllSources;
- (nonnull instancetype)initWithPreloadAllSources:(BOOL)preloadAllSources OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaylistTransitionEvent")
@interface BMPPlaylistTransitionEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull from;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class BMPSeekPosition;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The current position.
@property (nonatomic, readonly, strong) BMPSeekPosition * _Nonnull from;
/// The target position.
@property (nonatomic, readonly, strong) BMPSeekPosition * _Nonnull to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithFrom:(BMPSeekPosition * _Nonnull)from to:(BMPSeekPosition * _Nonnull)to OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class represent seeking position
SWIFT_CLASS_NAMED("SeekPosition")
@interface BMPSeekPosition : NSObject
/// The relevant <code>Source</code>.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The position within the <code>source</code> in seconds.
@property (nonatomic, readonly) NSTimeInterval time;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BMPSourceListener;

SWIFT_PROTOCOL("_TtP14BitmovinPlayer18SourceEventHandler_")
@protocol SourceEventHandler
- (void)addListener:(id <BMPSourceListener> _Nonnull)listener;
- (void)removeListener:(id <BMPSourceListener> _Nonnull)listener;
@end

@class BMPSourceItem;
enum BMPSourceState : NSInteger;

SWIFT_PROTOCOL_NAMED("Source")
@protocol BMPSource <SourceEventHandler>
@property (nonatomic, readonly, strong) BMPSourceItem * _Nonnull sourceItem;
@property (nonatomic, readonly) BOOL isActive;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) enum BMPSourceState state;
@end




SWIFT_CLASS_NAMED("SourceFactory")
@interface BMPSourceFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a Source based on the provided SourceItem.
+ (id <BMPSource> _Nonnull)createFrom:(BMPSourceItem * _Nonnull)sourceItem SWIFT_WARN_UNUSED_RESULT;
@end

@class BMPSourceLoadEvent;
@class BMPSourceLoadedEvent;
@class BMPSourceUnloadEvent;
@class BMPSourceUnloadedEvent;

SWIFT_PROTOCOL_NAMED("SourceListener")
@protocol BMPSourceListener <NSObject>
@optional
- (void)onDurationChanged:(BMPDurationChangedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onSourceLoad:(BMPSourceLoadEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onSourceUnload:(BMPSourceUnloadEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onEvent:(id <BMPSourceEvent> _Nonnull)event source:(id <BMPSource> _Nonnull)source;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadEvent")
@interface BMPSourceLoadEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadedEvent")
@interface BMPSourceLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPSourceLoadedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <BMPJsonEncodable>
- (NSString * _Nullable)toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPSourceState, "SourceState", open) {
/// The source is currently not queued in any player.
  BMPSourceStateIdle = 0,
/// The source is currently queued in a player.
  BMPSourceStateQueued = 1,
/// The source is currently queued in a player and loaded.
  BMPSourceStateLoaded = 2,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadEvent")
@interface BMPSourceUnloadEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadedEvent")
@interface BMPSourceUnloadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) enum BMPUserInterfaceType userInterfaceType;
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) enum BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end








/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end

@protocol _BMPCaptionHandlerDelegate;
@class BMPSubtitleTrack;
@protocol _BMPConfigurationService;
@class _BMPAVPlayer;

SWIFT_CLASS_NAMED("_AVPlayerCaptionHandler")
@interface _BMPAVPlayerCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService player:(_BMPAVPlayer * _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPAVPlayerItem;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class AVMediaSelectionOption;
@class AVMediaSelectionGroup;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willSeekToTargetTime:(CMTime)seekTarget;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didSeekWithSuccess:(BOOL)finished;
@end


SWIFT_PROTOCOL_NAMED("_CaptionHandler")
@protocol _BMPCaptionHandler
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
/// note:
/// no-op when the passed subtitle is already active
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
/// note:
/// no-op when no subtitle is currently active
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVQueuePlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithItems:(NSArray<AVPlayerItem *> * _Nonnull)items SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// The threshold value for TimeService.getMaxTimeShift.
/// When the internal value for the maximal possible timeshift is lower than this threshold, timeshifting should be
/// disabled. That means TimeService.getMaxTimeShift returns 0 in that case.
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
@end

@protocol _BMPLegacySourceInternal;

/// Provides the current active Source within the configured playlist
SWIFT_PROTOCOL_NAMED("_CurrentSourceProvider")
@protocol _BMPCurrentSourceProvider
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable currentSource;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player currentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setupAudioTracks;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end

@protocol _BMPTimeService;
@protocol _BMPPlayerEventEmitter;
@protocol _BMPPlaylistSourcesProvider;

SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player timeService:(id <_BMPTimeService> _Nonnull)timeService playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter configurationService:(id <_BMPConfigurationService> _Nonnull)configurationService playlistSourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)playlistSourcesProvider OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeStatus:(AVPlayerItemStatus)oldStatus newStatus:(AVPlayerItemStatus)newStatus;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (void)onPlayerActive:(BMPPlayerActiveEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (void)onPlayerInactive:(BMPPlayerInactiveEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end

@class _BMPInternalActiveSourceChangedEvent;

SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <_BMPConfigurationService, _BMPPlayerListenerInternal>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithPlayerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
- (void)onInternalActiveSourceChanged:(_BMPInternalActiveSourceChangedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_PlayerEventEmitter")
@protocol _BMPPlayerEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitPlayerEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPPlayerEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(BMPPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)emitPlayerEvent:(BMPPlayerEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_SourceEventEmitter")
@protocol _BMPSourceEventEmitter
- (void)emitWithEvent:(id <BMPSourceEvent> _Nonnull)event isInternal:(BOOL)isInternal;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPSourceEventEmitter>
- (void)emitWithEvent:(id <BMPSourceEvent> _Nonnull)event isInternal:(BOOL)isInternal;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end


SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player currentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider OBJC_DESIGNATED_INITIALIZER;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
@end


/// Can be used to receive the playback finished state
SWIFT_PROTOCOL_NAMED("_PlaybackFinishedService")
@protocol _BMPPlaybackFinishedService
@property (nonatomic, readonly) BOOL isPlaybackFinished;
@end


SWIFT_CLASS_NAMED("_DefaultPlaybackFinishedService")
@interface _BMPDefaultPlaybackFinishedService : _BMPDefaultService <_BMPPlaybackFinishedService>
@property (nonatomic, readonly) BOOL isPlaybackFinished;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter playlistSourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)playlistSourcesProvider OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class _BMPInternalPlayEvent;

@interface _BMPDefaultPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalPlay:(_BMPInternalPlayEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end


@interface _BMPDefaultPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidPlayToEnd:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("_PlaylistService")
@protocol _BMPPlaylistService
- (void)loadPlaylistConfiguration:(BMPPlaylistConfiguration * _Nonnull)playlistConfig;
- (void)unload;
@end

@protocol _BMPPlaybackService;

SWIFT_CLASS_NAMED("_DefaultPlaylistService")
@interface _BMPDefaultPlaylistService : _BMPDefaultService <_BMPPlaylistService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player playerSourceEventEmitter:(id <_BMPSourceEventEmitter> _Nonnull)playerSourceEventEmitter playerConfigService:(id <_BMPConfigurationService> _Nonnull)playerConfigService playerDeficiencyService:(id <_BMPDeficiencyService> _Nonnull)playerDeficiencyService playbackService:(id <_BMPPlaybackService> _Nonnull)playbackService logger:(id <_BMPLogger> _Nonnull)logger playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer))
- (void)start;
- (void)stop;
@end


/// Provides the sources within the configured playlist
SWIFT_PROTOCOL_NAMED("_PlaylistSourcesProvider")
@protocol _BMPPlaylistSourcesProvider
@property (nonatomic, readonly, copy) NSArray<id <_BMPLegacySourceInternal>> * _Nonnull sources;
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlaylistSourcesProvider>
@property (nonatomic, readonly, copy) NSArray<id <_BMPLegacySourceInternal>> * _Nonnull sources;
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCurrentSourceProvider>
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable currentSource;
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadPlaylistConfiguration:(BMPPlaylistConfiguration * _Nonnull)playlistConfig;
- (void)unload;
@end


/// Handles transitioning events between sources.
SWIFT_PROTOCOL_NAMED("_PlaylistTransitioningService")
@protocol _BMPPlaylistTransitioningService
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistTransitioningService")
@interface _BMPDefaultPlaylistTransitioningService : _BMPDefaultService <_BMPPlaylistTransitioningService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPlaylistTransitioningService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalActiveSourceChanged:(_BMPInternalActiveSourceChangedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end


SWIFT_CLASS_NAMED("_DefaultSeekingService")
@interface _BMPDefaultSeekingService : _BMPDefaultService
/// Defines the seeking state as it is reported externally. It is YES between an onSeek and onSeeked event
@property (nonatomic, readonly) BOOL isSeeking;
@property (nonatomic, readonly) BOOL isSeekOrTimeShiftInProgress;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player timeService:(id <_BMPTimeService> _Nonnull)timeService playbackService:(id <_BMPPlaybackService> _Nonnull)playbackService currentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider playlistSourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)playlistSourcesProvider sourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)sourcesProvider logger:(id <_BMPLogger> _Nonnull)logger playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter;
- (void)start;
- (void)stop;
- (void)adjustToTargetStartTime:(NSTimeInterval)startTime;
- (void)seekBackToStartIfNeeded;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultSeekingService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end


SWIFT_PROTOCOL_NAMED("_SeekingService")
@protocol _BMPSeekingService <_BMPService>
@property (nonatomic, readonly) BOOL isSeekOrTimeShiftInProgress;
@property (nonatomic, readonly) BOOL isSeeking;
- (void)seekToSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
- (void)timeShift:(NSTimeInterval)time;
- (void)seekBackToStartIfNeeded;
- (void)adjustToTargetStartTime:(NSTimeInterval)startTime;
@end


@interface _BMPDefaultSeekingService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPSeekingService>
- (void)seekToSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
- (void)timeShift:(NSTimeInterval)time;
@end


@interface _BMPDefaultSeekingService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player willSeekToTargetTime:(CMTime)seekTarget suppressEvents:(BOOL)suppressEvents;
- (void)player:(_BMPAVPlayer * _Nonnull)player didSeekWithSuccess:(BOOL)finished suppressEvents:(BOOL)suppressEvents;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end



SWIFT_CLASS_NAMED("_ExternalCaptionHandler")
@interface _BMPExternalCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService deficiencyService:(id <_BMPDeficiencyService> _Nonnull)deficiencyService sourceEventEmitter:(id <_BMPSourceEventEmitter> _Nonnull)sourceEventEmitter playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPExternalCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalActiveSourceChangedEvent")
@interface _BMPInternalActiveSourceChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable from;
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalSourcePlaybackFinishedEvent")
@interface _BMPInternalSourcePlaybackFinishedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This is a temporarily workaround for Obj-C usage of the Source as we use Swift only types in SourceInternal
SWIFT_PROTOCOL_NAMED("_LegacySourceInternal") SWIFT_DEPRECATED_MSG("Use SourceInternal instead! (Only available in Swift)")
@protocol _BMPLegacySourceInternal <BMPSource>
@property (nonatomic) BOOL isActive;
@property (nonatomic) enum BMPSourceState state;
@property (nonatomic, readonly, strong) AVURLAsset * _Nonnull urlAsset;
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nonnull playerItem;
@property (nonatomic, readonly) BMPMediaSourceType streamType;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


@protocol _BMPPlaylistApiDelegate;

SWIFT_CLASS_NAMED("_PlayerPlaylistApi")
@interface _BMPPlayerPlaylistApi : NSObject <BMPPlaylistApi>
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
- (nonnull instancetype)initWithDelegate:(id <_BMPPlaylistApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)seekWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end




SWIFT_PROTOCOL_NAMED("_SourceListenerInternal")
@protocol _BMPSourceListenerInternal <BMPSourceListener>
@optional
- (void)onInternalSourcePlaybackFinished:(_BMPInternalSourcePlaybackFinishedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
@end

@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_UIDeviceVersionHelper")
@interface _BMPUIDeviceVersionHelper : NSObject
- (nonnull instancetype)init;
- (BOOL)isSystemVersionGreaterThanOrEqual:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSystemVersionLessThan:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#else
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreMedia;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <BitmovinPlayer/BitmovinPlayer.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="BitmovinPlayer",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class BMPAudioTrack;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("AudioAddedEvent")
@interface BMPAudioAddedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nonnull audioTrack;
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithAudioTrack:(BMPAudioTrack * _Nonnull)audioTrack time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




/// Holds different information about the buffer levels.
SWIFT_CLASS_NAMED("BufferLevel")
@interface BMPBufferLevel : NSObject
/// The amount of currently buffered data, e.g. audio or video buffer level.
@property (nonatomic, readonly) NSTimeInterval level;
/// The target buffer level the player tries to maintain.
@property (nonatomic, readonly) NSTimeInterval targetLevel;
/// The media type the buffer data applies to.
@property (nonatomic, readonly) enum BMPMediaType media;
/// The buffer type the buffer data applies to.
@property (nonatomic, readonly) BMPBufferType type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPCafDrmConfig;

SWIFT_PROTOCOL_NAMED("_CafDrmConfigConvertible")
@protocol _BMPCafDrmConfigConvertible
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


@interface BMPClearKeyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end




/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DestroyEvent")
@interface BMPDestroyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_PROTOCOL_NAMED("SourceEvent")
@protocol BMPSourceEvent <BMPEvent>
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DownloadFinishedEvent")
@interface BMPDownloadFinishedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, readonly, copy) NSURL * _Nullable lastRedirectLocation;
@property (nonatomic, readonly) NSTimeInterval downloadTime;
@property (nonatomic, readonly) NSUInteger httpStatus;
@property (nonatomic, readonly) NSUInteger size;
@property (nonatomic, readonly) BOOL successful;
@property (nonatomic, readonly) BOOL wasSuccessful;
- (nonnull instancetype)initWithType:(NSString * _Nonnull)type url:(NSURL * _Nonnull)url downloadTime:(NSTimeInterval)downloadTime httpStatus:(NSUInteger)httpStatus size:(NSUInteger)size success:(BOOL)success lastRedirectLocation:(NSURL * _Nullable)lastRedirectLocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPRequestMetadata;

@interface BMPDownloadFinishedEvent (SWIFT_EXTENSION(BitmovinPlayer))
- (nonnull instancetype)initWithRequestMetadata:(_BMPRequestMetadata * _Nonnull)requestMetadata;
@end

enum BMPDrmDataType : NSInteger;

SWIFT_CLASS_NAMED("DrmData")
@interface BMPDrmData : NSObject
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly) enum BMPDrmDataType type;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data type:(enum BMPDrmDataType)type OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithSkdUri:(NSString * _Nonnull)skdUri;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPDrmDataType, "DrmDataType", open) {
  BMPDrmDataTypeSkdUri = 0,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DrmDataParsedEvent")
@interface BMPDrmDataParsedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull data;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithData:(BMPDrmData * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// Represents an HTTP request for DRM information.
SWIFT_CLASS_NAMED("DrmRequest")
@interface BMPDrmRequest : BMPHttpRequest
/// The DrmData that is associated with the request.
@property (nonatomic, readonly, strong) BMPDrmData * _Nonnull drmData;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(NSString * _Nonnull)method SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("DurationChangedEvent")
@interface BMPDurationChangedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly) NSTimeInterval duration;
- (nonnull instancetype)initWithDuration:(NSTimeInterval)duration;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPDurationChangedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <BMPJsonable>
+ (nullable instancetype)fromJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end




@interface NSURLRequest (SWIFT_EXTENSION(BitmovinPlayer))
- (BMPHttpRequest * _Nullable)_toBitmovinHttpRequest SWIFT_WARN_UNUSED_RESULT;
- (BMPDrmRequest * _Nullable)_toBitmovinDrmRequestWithSkdUri:(NSString * _Nonnull)skdUri SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayEvent")
@interface BMPPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




@interface BMPPlayReadyConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaybackFinishedEvent")
@interface BMPPlaybackFinishedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayerActiveEvent")
@interface BMPPlayerActiveEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class BMPPlayerConfiguration;
@class BMPPlayer;

SWIFT_CLASS_NAMED("PlayerFactory")
@interface BMPPlayerFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a player instance configured via the provided playerConfig.
+ (BMPPlayer * _Nonnull)createWithPlayerConfig:(BMPPlayerConfiguration * _Nonnull)playerConfig SWIFT_WARN_UNUSED_RESULT;
/// Creates a player instance with the default.
+ (BMPPlayer * _Nonnull)create SWIFT_WARN_UNUSED_RESULT;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlayerInactiveEvent")
@interface BMPPlayerInactiveEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BMPSource;

SWIFT_PROTOCOL_NAMED("PlaylistApi")
@protocol BMPPlaylistApi
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
- (void)seekWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
@end

@class BMPPlaylistOptions;

SWIFT_CLASS_NAMED("PlaylistConfiguration")
@interface BMPPlaylistConfiguration : BMPConfiguration
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
@property (nonatomic, readonly, strong) BMPPlaylistOptions * _Nonnull options;
- (nonnull instancetype)initWithSources:(NSArray<id <BMPSource>> * _Nonnull)sources;
- (nonnull instancetype)initWithSources:(NSArray<id <BMPSource>> * _Nonnull)sources options:(BMPPlaylistOptions * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("PlaylistOptions")
@interface BMPPlaylistOptions : NSObject
@property (nonatomic, readonly) BOOL preloadAllSources;
- (nonnull instancetype)initWithPreloadAllSources:(BOOL)preloadAllSources OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("PlaylistTransitionEvent")
@interface BMPPlaylistTransitionEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull from;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("ReadyEvent")
@interface BMPReadyEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class BMPSeekPosition;

/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekEvent")
@interface BMPSeekEvent : BMPPlayerEvent
/// The current position.
@property (nonatomic, readonly, strong) BMPSeekPosition * _Nonnull from;
/// The target position.
@property (nonatomic, readonly, strong) BMPSeekPosition * _Nonnull to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithFrom:(BMPSeekPosition * _Nonnull)from to:(BMPSeekPosition * _Nonnull)to OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class represent seeking position
SWIFT_CLASS_NAMED("SeekPosition")
@interface BMPSeekPosition : NSObject
/// The relevant <code>Source</code>.
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
/// The position within the <code>source</code> in seconds.
@property (nonatomic, readonly) NSTimeInterval time;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SeekedEvent")
@interface BMPSeekedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol BMPSourceListener;

SWIFT_PROTOCOL("_TtP14BitmovinPlayer18SourceEventHandler_")
@protocol SourceEventHandler
- (void)addListener:(id <BMPSourceListener> _Nonnull)listener;
- (void)removeListener:(id <BMPSourceListener> _Nonnull)listener;
@end

@class BMPSourceItem;
enum BMPSourceState : NSInteger;

SWIFT_PROTOCOL_NAMED("Source")
@protocol BMPSource <SourceEventHandler>
@property (nonatomic, readonly, strong) BMPSourceItem * _Nonnull sourceItem;
@property (nonatomic, readonly) BOOL isActive;
@property (nonatomic, readonly) NSTimeInterval duration;
@property (nonatomic, readonly) enum BMPSourceState state;
@end




SWIFT_CLASS_NAMED("SourceFactory")
@interface BMPSourceFactory : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Creates a Source based on the provided SourceItem.
+ (id <BMPSource> _Nonnull)createFrom:(BMPSourceItem * _Nonnull)sourceItem SWIFT_WARN_UNUSED_RESULT;
@end

@class BMPSourceLoadEvent;
@class BMPSourceLoadedEvent;
@class BMPSourceUnloadEvent;
@class BMPSourceUnloadedEvent;

SWIFT_PROTOCOL_NAMED("SourceListener")
@protocol BMPSourceListener <NSObject>
@optional
- (void)onDurationChanged:(BMPDurationChangedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onSourceLoad:(BMPSourceLoadEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onSourceUnload:(BMPSourceUnloadEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
- (void)onEvent:(id <BMPSourceEvent> _Nonnull)event source:(id <BMPSource> _Nonnull)source;
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadEvent")
@interface BMPSourceLoadEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceLoadedEvent")
@interface BMPSourceLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface BMPSourceLoadedEvent (SWIFT_EXTENSION(BitmovinPlayer)) <BMPJsonEncodable>
- (NSString * _Nullable)toJsonString:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, BMPSourceState, "SourceState", open) {
/// The source is currently not queued in any player.
  BMPSourceStateIdle = 0,
/// The source is currently queued in a player.
  BMPSourceStateQueued = 1,
/// The source is currently queued in a player and loaded.
  BMPSourceStateLoaded = 2,
};


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadEvent")
@interface BMPSourceUnloadEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("SourceUnloadedEvent")
@interface BMPSourceUnloadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, strong) id <BMPSource> _Nonnull source;
- (nonnull instancetype)initWithSource:(id <BMPSource> _Nonnull)source OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class BMPUserInterfaceConfiguration;

SWIFT_CLASS_NAMED("StyleConfiguration")
@interface BMPStyleConfiguration : BMPConfiguration
/// Sets if the the UI should be enabled or not. Default value is true.
@property (nonatomic) BOOL isUiEnabled;
@property (nonatomic) BOOL uiEnabled;
/// Set which user interface type should be used. Default value is UserInterfaceType.bitmovin on iOS and
/// UserInterfaceType.system on tvOS. This setting only applies if StyleConfiguration#uiEnabled is set to true.
@property (nonatomic) enum BMPUserInterfaceType userInterfaceType;
/// Determines how the video content is scaled or stretched within the parent container’s bounds.
/// Possible values are defined in ScalingMode. Default value is ScalingMode.fit.
@property (nonatomic) enum BMPScalingMode scalingMode;
/// An optional configuration object, containing configuration values which apply to
/// the selected user interface type.
/// <ul>
///   <li>
///     When UserInterfaceType.system is selected, a SystemUserInterfaceConfiguration can be set.
///   </li>
///   <li>
///     When UserInterfaceType.subtitle is selected, a SubtitleUserInterfaceConfiguration can be set.
///   </li>
/// </ul>
@property (nonatomic, strong) BMPUserInterfaceConfiguration * _Nullable userInterfaceConfiguration;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end








/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftEvent")
@interface BMPTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// See BMPPlayerListener.h for more information on this event.
SWIFT_CLASS_NAMED("TimeShiftedEvent")
@interface BMPTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




@interface BMPWidevineConfiguration (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCafDrmConfigConvertible>
- (_BMPCafDrmConfig * _Nullable)toCafDrmConfig SWIFT_WARN_UNUSED_RESULT;
@end

@protocol _BMPCaptionHandlerDelegate;
@class BMPSubtitleTrack;
@protocol _BMPConfigurationService;
@class _BMPAVPlayer;

SWIFT_CLASS_NAMED("_AVPlayerCaptionHandler")
@interface _BMPAVPlayerCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService player:(_BMPAVPlayer * _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class _BMPAVPlayerItem;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class AVMediaSelectionOption;
@class AVMediaSelectionGroup;

@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeMediaOptionFrom:(AVMediaSelectionOption * _Nullable)from to:(AVMediaSelectionOption * _Nullable)to inMediaSelectionGroup:(AVMediaSelectionGroup * _Nonnull)mediaSelectionGroup;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem willSeekToTargetTime:(CMTime)seekTarget;
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didSeekWithSuccess:(BOOL)finished;
@end


SWIFT_PROTOCOL_NAMED("_CaptionHandler")
@protocol _BMPCaptionHandler
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
/// note:
/// no-op when the passed subtitle is already active
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
/// note:
/// no-op when no subtitle is currently active
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


@interface _BMPAVPlayerCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end

@class AVPlayerItem;

SWIFT_CLASS("_TtC14BitmovinPlayer12_BMPAVPlayer")
@interface _BMPAVPlayer : AVQueuePlayer
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nullable currentItem;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)removeObserver:(id <_BMPAVPlayerObserver> _Nonnull)observer;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter suppressEvents:(BOOL)suppressEvents completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)seekToTime:(CMTime)time toleranceBefore:(CMTime)toleranceBefore toleranceAfter:(CMTime)toleranceAfter completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// For following method calls we notify the observers when they were called and forward the
/// calls to super.
- (void)seekToTime:(CMTime)time completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)initWithItems:(NSArray<AVPlayerItem *> * _Nonnull)items SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithURL:(NSURL * _Nonnull)URL SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithPlayerItem:(AVPlayerItem * _Nullable)item SWIFT_UNAVAILABLE;
@end

@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate;

SWIFT_CLASS_NAMED("_BackgroundPlaybackLifecycleHandler")
@interface _BMPBackgroundPlaybackLifecycleHandler : NSObject
@property (nonatomic, weak) id <_BMPBackgroundPlaybackLifecycleHandlerDelegate> _Nullable delegate;
- (nonnull instancetype)init;
@end


SWIFT_PROTOCOL_NAMED("_BackgroundPlaybackLifecycleHandlerDelegate")
@protocol _BMPBackgroundPlaybackLifecycleHandlerDelegate
- (void)enteringBackground;
- (void)exitingBackground;
@end

enum _BMPLogLevel : NSInteger;

SWIFT_PROTOCOL_NAMED("_Logger")
@protocol _BMPLogger
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_CLASS_NAMED("_BitmovinLogger")
@interface _BMPBitmovinLogger : NSObject <_BMPLogger>
- (nonnull instancetype)initWithLevel:(enum _BMPLogLevel)level OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)log:(NSString * _Nonnull)message level:(enum _BMPLogLevel)level;
@end


SWIFT_PROTOCOL_NAMED("_BufferApiDelegate")
@protocol _BMPBufferApiDelegate
/// Returns the buffer level of specified type.
/// \param type The type of buffer to return the level for.
///
- (BMPBufferLevel * _Nonnull)bufferAPI_getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
/// Sets the target level for the forward buffer.
/// \param value The value to set.
///
- (void)bufferAPI_setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_PROTOCOL_NAMED("_BufferService")
@protocol _BMPBufferService <BMPBufferApi, _BMPService>
@end


SWIFT_CLASS_NAMED("_CafDrmConfig")
@interface _BMPCafDrmConfig : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@class BMPSourceConfiguration;

SWIFT_PROTOCOL_NAMED("_ConfigurationService")
@protocol _BMPConfigurationService
/// The Bitmovin Player license key, as defined in PlayerConfiguration.key or if not, in the Info.plist file of
/// the application which is using the SDK.
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
/// The Bitmovin SDK Version.
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
/// The package name of the Application.
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
/// The threshold value for TimeService.getMaxTimeShift.
/// When the internal value for the maximal possible timeshift is lower than this threshold, timeshifting should be
/// disabled. That means TimeService.getMaxTimeShift returns 0 in that case.
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
/// Holds a reference to the current player configuration.
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
/// Returns false if the currently loaded SourceItem is not a OfflineSourceItem, else it returns the value of the
/// <code>isRestrictedToAssetCache</code> property of the currently loaded OfflineSourceItem.
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
/// Returns true if AVPlayer should not render captions on its own, the captions need to be rendered manually by
/// listening to cue events. If false is returned, the captions are rendered by AVPlayer, cue events are
/// additionally fired.
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
@end

@protocol _BMPLegacySourceInternal;

/// Provides the current active Source within the configured playlist
SWIFT_PROTOCOL_NAMED("_CurrentSourceProvider")
@protocol _BMPCurrentSourceProvider
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable currentSource;
@end

@protocol _BMPNamespacedServiceLocator;

SWIFT_CLASS_NAMED("_DefaultAudioService")
@interface _BMPDefaultAudioService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player currentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end


@interface _BMPDefaultAudioService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAudioService>
@property (nonatomic, readonly, copy) NSArray<BMPAudioTrack *> * _Nonnull availableAudio;
@property (nonatomic, readonly, strong) BMPAudioTrack * _Nullable audio;
- (void)setupAudioTracks;
- (void)setAudioWithIdentifier:(NSString * _Nonnull)audioTrackID;
@end

@protocol _BMPTimeService;
@protocol _BMPPlayerEventEmitter;
@protocol _BMPPlaylistSourcesProvider;

SWIFT_CLASS_NAMED("_DefaultBufferService")
@interface _BMPDefaultBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player timeService:(id <_BMPTimeService> _Nonnull)timeService playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter configurationService:(id <_BMPConfigurationService> _Nonnull)configurationService playlistSourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)playlistSourcesProvider OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItem:(_BMPAVPlayerItem * _Nonnull)playerItem didChangeStatus:(AVPlayerItemStatus)oldStatus newStatus:(AVPlayerItemStatus)newStatus;
@end


@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end

@class BMPConfigurationUpdatedEvent;

@interface _BMPDefaultBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onConfigurationUpdated:(BMPConfigurationUpdatedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (void)onPlayerActive:(BMPPlayerActiveEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (void)onPlayerInactive:(BMPPlayerInactiveEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end

@class _BMPInternalActiveSourceChangedEvent;

SWIFT_CLASS_NAMED("_DefaultConfigurationService")
@interface _BMPDefaultConfigurationService : _BMPDefaultService <_BMPConfigurationService, _BMPPlayerListenerInternal>
@property (nonatomic, readonly, copy) NSString * _Nullable licenseKey;
@property (nonatomic, readonly, copy) NSString * _Nullable sdkVersion;
@property (nonatomic, readonly, copy) NSString * _Nullable packageName;
@property (nonatomic, readonly) NSTimeInterval maxTimeShiftThreshold;
@property (nonatomic, readonly, strong) BMPPlayerConfiguration * _Nonnull playerConfiguration;
@property (nonatomic, readonly) _BMPServiceType type;
@property (nonatomic, readonly) BOOL isCurrentSourceRestrictedToCache;
@property (nonatomic, readonly) BOOL suppressDefaultCaptionRendering;
- (nonnull instancetype)initWithPlayerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter;
- (void)start;
- (void)stop;
- (void)updatePlayerConfiguration:(BMPPlayerConfiguration * _Nonnull)playerConfiguration;
- (void)updateSourceConfiguration:(BMPSourceConfiguration * _Nonnull)sourceConfiguration SWIFT_DEPRECATED;
- (void)onInternalActiveSourceChanged:(_BMPInternalActiveSourceChangedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_DeficiencyService")
@protocol _BMPDeficiencyService
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
@end


SWIFT_CLASS_NAMED("_DefaultDeficiencyService")
@interface _BMPDefaultDeficiencyService : _BMPDefaultService <_BMPDeficiencyService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (void)throwError:(NSInteger)code;
- (void)throwErrorWithCode:(NSInteger)code message:(NSString * _Nonnull)message;
- (void)throwError:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (void)throwLicensingErrorNoKey;
- (void)throwLicensingErrorInvalidDomain;
- (void)throwManifestNotFoundErrorWithReason:(NSString * _Nullable)reason;
- (void)throwSourceError;
- (void)throwSourceError:(NSString * _Nullable)reason;
- (void)throwWarning:(NSInteger)code;
- (void)throwWarning:(NSInteger)code replacements:(NSArray<NSString *> * _Nullable)replacements;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_PlayerEventEmitter")
@protocol _BMPPlayerEventEmitter <BMPPlayerEventHandler, _BMPService>
- (void)emitPlayerEvent:(BMPPlayerEvent * _Nonnull)event;
@end


SWIFT_CLASS_NAMED("_DefaultEventEmitter")
@interface _BMPDefaultEventEmitter : _BMPDefaultService <_BMPPlayerEventEmitter>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(BMPPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)emitPlayerEvent:(BMPPlayerEvent * _Nonnull)event;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_SourceEventEmitter")
@protocol _BMPSourceEventEmitter
- (void)emitWithEvent:(id <BMPSourceEvent> _Nonnull)event isInternal:(BOOL)isInternal;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPSourceEventEmitter>
- (void)emitWithEvent:(id <BMPSourceEvent> _Nonnull)event isInternal:(BOOL)isInternal;
@end


@interface _BMPDefaultEventEmitter (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerEventHandler>
- (void)addPlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
- (void)removePlayerListener:(id <BMPPlayerListener> _Nonnull)listener;
@end


SWIFT_PROTOCOL_NAMED("_InitializationService")
@protocol _BMPInitializationService <_BMPService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
@end


SWIFT_CLASS_NAMED("_DefaultInitializationService")
@interface _BMPDefaultInitializationService : _BMPDefaultService <_BMPInitializationService>
@property (nonatomic, readonly) BMPMediaSourceType selectedStreamType;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player currentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider OBJC_DESIGNATED_INITIALIZER;
- (void)setup:(BMPPlayerConfiguration * _Nonnull)playerConfig;
- (void)loadSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultInitializationService (SWIFT_EXTENSION(BitmovinPlayer))
@property (nonatomic, readonly) _BMPServiceType type;
@end


/// Can be used to receive the playback finished state
SWIFT_PROTOCOL_NAMED("_PlaybackFinishedService")
@protocol _BMPPlaybackFinishedService
@property (nonatomic, readonly) BOOL isPlaybackFinished;
@end


SWIFT_CLASS_NAMED("_DefaultPlaybackFinishedService")
@interface _BMPDefaultPlaybackFinishedService : _BMPDefaultService <_BMPPlaybackFinishedService>
@property (nonatomic, readonly) BOOL isPlaybackFinished;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter playlistSourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)playlistSourcesProvider OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class _BMPInternalPlayEvent;

@interface _BMPDefaultPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalPlay:(_BMPInternalPlayEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end


@interface _BMPDefaultPlaybackFinishedService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidPlayToEnd:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end

@protocol _BMPPlaylistDecryptionKeyStoreStrategy;

SWIFT_PROTOCOL_NAMED("_PlaylistManipulator")
@protocol _BMPPlaylistManipulator
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistManipulator")
@interface _BMPDefaultPlaylistManipulator : NSObject <_BMPPlaylistManipulator>
- (NSString * _Nonnull)replaceWithDecryptionKeyUrl:(NSString * _Nonnull)keyUrl with:(NSData * _Nonnull)keyData in:(NSString * _Nonnull)playlist decryptionKeyStoreStrategy:(id <_BMPPlaylistDecryptionKeyStoreStrategy> _Nonnull)keyStoreStrategy SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)replaceManifestUrl:(NSString * _Nonnull)url withCustomUrl:(NSString * _Nonnull)customUrl in:(NSString * _Nonnull)playlist SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL_NAMED("_PlaylistService")
@protocol _BMPPlaylistService
- (void)loadPlaylistConfiguration:(BMPPlaylistConfiguration * _Nonnull)playlistConfig;
- (void)unload;
@end

@protocol _BMPPlaybackService;

SWIFT_CLASS_NAMED("_DefaultPlaylistService")
@interface _BMPDefaultPlaylistService : _BMPDefaultService <_BMPPlaylistService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player playerSourceEventEmitter:(id <_BMPSourceEventEmitter> _Nonnull)playerSourceEventEmitter playerConfigService:(id <_BMPConfigurationService> _Nonnull)playerConfigService playerDeficiencyService:(id <_BMPDeficiencyService> _Nonnull)playerDeficiencyService playbackService:(id <_BMPPlaybackService> _Nonnull)playbackService logger:(id <_BMPLogger> _Nonnull)logger playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer))
- (void)start;
- (void)stop;
@end


/// Provides the sources within the configured playlist
SWIFT_PROTOCOL_NAMED("_PlaylistSourcesProvider")
@protocol _BMPPlaylistSourcesProvider
@property (nonatomic, readonly, copy) NSArray<id <_BMPLegacySourceInternal>> * _Nonnull sources;
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlaylistSourcesProvider>
@property (nonatomic, readonly, copy) NSArray<id <_BMPLegacySourceInternal>> * _Nonnull sources;
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCurrentSourceProvider>
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable currentSource;
@end


@interface _BMPDefaultPlaylistService (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadPlaylistConfiguration:(BMPPlaylistConfiguration * _Nonnull)playlistConfig;
- (void)unload;
@end


/// Handles transitioning events between sources.
SWIFT_PROTOCOL_NAMED("_PlaylistTransitioningService")
@protocol _BMPPlaylistTransitioningService
@end


SWIFT_CLASS_NAMED("_DefaultPlaylistTransitioningService")
@interface _BMPDefaultPlaylistTransitioningService : _BMPDefaultService <_BMPPlaylistTransitioningService>
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultPlaylistTransitioningService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onInternalActiveSourceChanged:(_BMPInternalActiveSourceChangedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end


SWIFT_CLASS_NAMED("_DefaultSeekingService")
@interface _BMPDefaultSeekingService : _BMPDefaultService
/// Defines the seeking state as it is reported externally. It is YES between an onSeek and onSeeked event
@property (nonatomic, readonly) BOOL isSeeking;
@property (nonatomic, readonly) BOOL isSeekOrTimeShiftInProgress;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithPlayer:(_BMPAVPlayer * _Nonnull)player timeService:(id <_BMPTimeService> _Nonnull)timeService playbackService:(id <_BMPPlaybackService> _Nonnull)playbackService currentSourceProvider:(id <_BMPCurrentSourceProvider> _Nonnull)currentSourceProvider playlistSourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)playlistSourcesProvider sourcesProvider:(id <_BMPPlaylistSourcesProvider> _Nonnull)sourcesProvider logger:(id <_BMPLogger> _Nonnull)logger playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter;
- (void)start;
- (void)stop;
- (void)adjustToTargetStartTime:(NSTimeInterval)startTime;
- (void)seekBackToStartIfNeeded;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultSeekingService (SWIFT_EXTENSION(BitmovinPlayer)) <BMPPlayerListener>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end


SWIFT_PROTOCOL_NAMED("_SeekingService")
@protocol _BMPSeekingService <_BMPService>
@property (nonatomic, readonly) BOOL isSeekOrTimeShiftInProgress;
@property (nonatomic, readonly) BOOL isSeeking;
- (void)seekToSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
- (void)timeShift:(NSTimeInterval)time;
- (void)seekBackToStartIfNeeded;
- (void)adjustToTargetStartTime:(NSTimeInterval)startTime;
@end


@interface _BMPDefaultSeekingService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPSeekingService>
- (void)seekToSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
- (void)timeShift:(NSTimeInterval)time;
@end


@interface _BMPDefaultSeekingService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player willSeekToTargetTime:(CMTime)seekTarget suppressEvents:(BOOL)suppressEvents;
- (void)player:(_BMPAVPlayer * _Nonnull)player didSeekWithSuccess:(BOOL)finished suppressEvents:(BOOL)suppressEvents;
@end


SWIFT_CLASS_NAMED("_DefaultUrlAssetValuesLoader")
@interface _BMPDefaultUrlAssetValuesLoader : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class AVURLAsset;

@interface _BMPDefaultUrlAssetValuesLoader (SWIFT_EXTENSION(BitmovinPlayer))
- (void)loadValuesAsynchronouslyForAsset:(AVURLAsset * _Nonnull)asset onComplete:(void (^ _Nullable)(AVURLAsset * _Nonnull, BOOL, BOOL))onComplete;
- (void)triggerContentKeyRequestForAsset:(AVURLAsset * _Nonnull)asset;
@end

@class BMPVideoQuality;

SWIFT_PROTOCOL_NAMED("_VideoService")
@protocol _BMPVideoService
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@end


SWIFT_CLASS_NAMED("_DefaultVideoService")
@interface _BMPDefaultVideoService : _BMPDefaultService <_BMPVideoService>
@property (nonatomic, readonly, copy) NSArray<BMPVideoQuality *> * _Nonnull availableVideoQualities;
@property (nonatomic, readonly, strong) BMPVideoQuality * _Nullable videoQuality;
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)initWithServiceLocator:(id <_BMPNamespacedServiceLocator> _Nonnull)serviceLocator player:(_BMPAVPlayer * _Nonnull)player OBJC_DESIGNATED_INITIALIZER;
- (void)start;
- (void)stop;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerItemListener>
- (void)playerItemDidReceiveNewAccessLogEntry:(_BMPAVPlayerItem * _Nonnull)playerItem;
@end


@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPAVPlayerObserver>
- (void)player:(_BMPAVPlayer * _Nonnull)player didChangeCurrentItem:(_BMPAVPlayerItem * _Nullable)oldItem newItem:(_BMPAVPlayerItem * _Nullable)newItem;
@end

@class _BMPMasterPlaylistLoadedEvent;

@interface _BMPDefaultVideoService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPPlayerListenerInternal>
- (void)onSourceLoaded:(BMPSourceLoadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (void)onSourceUnloaded:(BMPSourceUnloadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
- (void)onMasterPlaylistLoaded:(_BMPMasterPlaylistLoadedEvent * _Nonnull)event player:(BMPPlayer * _Nonnull)player;
@end



SWIFT_CLASS_NAMED("_ExternalCaptionHandler")
@interface _BMPExternalCaptionHandler : NSObject
@property (nonatomic, weak) id <_BMPCaptionHandlerDelegate> _Nullable delegate;
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable activeSubtitleTrack;
@property (nonatomic, readonly, copy) NSArray<BMPSubtitleTrack *> * _Nonnull availableSubtitleTracks;
- (nonnull instancetype)initWithConfigurationService:(id <_BMPConfigurationService> _Nonnull)configurationService deficiencyService:(id <_BMPDeficiencyService> _Nonnull)deficiencyService sourceEventEmitter:(id <_BMPSourceEventEmitter> _Nonnull)sourceEventEmitter playerEventEmitter:(id <_BMPPlayerEventEmitter> _Nonnull)playerEventEmitter;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPExternalCaptionHandler (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPCaptionHandler>
@property (nonatomic, readonly, strong) BMPSubtitleTrack * _Nullable defaultSubtitleTrack;
- (void)initializeSubtitleTracksWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem;
- (void)enableSubtitleTrackById:(NSString * _Nullable)subtitleTrackId;
- (void)disableActiveSubtitleTrack;
- (void)addSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack;
- (void)removeSubtitleTrackById:(NSString * _Nonnull)subtitleTrackId;
- (BOOL)containsSubtitleTrack:(BMPSubtitleTrack * _Nonnull)subtitleTrack SWIFT_WARN_UNUSED_RESULT;
- (void)clearSubtitleTracks;
- (BMPSubtitleTrack * _Nullable)forcedSubtitleTrackForLanguage:(NSString * _Nonnull)language SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_GoogleCastBufferService")
@interface _BMPGoogleCastBufferService : _BMPDefaultService
@property (nonatomic, readonly) _BMPServiceType type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface _BMPGoogleCastBufferService (SWIFT_EXTENSION(BitmovinPlayer)) <_BMPBufferService>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


SWIFT_CLASS_NAMED("_InitialTimeShiftContext")
@interface _BMPInitialTimeShiftContext : NSObject
@property (nonatomic, readonly) NSTimeInterval initialTimestamp;
@property (nonatomic, readonly) NSTimeInterval initialLiveEdge;
- (nonnull instancetype)initWithInitialTimestamp:(NSTimeInterval)initialTimestamp initialLiveEdge:(NSTimeInterval)initialLiveEdge OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_PROTOCOL_NAMED("_PlaylistDecryptionKeyStoreStrategy")
@protocol _BMPPlaylistDecryptionKeyStoreStrategy <NSObject>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_InlinePlaylistDecryptionKeyStoreStrategy")
@interface _BMPInlinePlaylistDecryptionKeyStoreStrategy : NSObject <_BMPPlaylistDecryptionKeyStoreStrategy>
- (NSString * _Nullable)uriFor:(NSString * _Nonnull)keyUrl decryptionKeyData:(NSData * _Nonnull)keyData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalActiveSourceChangedEvent")
@interface _BMPInternalActiveSourceChangedEvent : BMPPlayerEvent
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable from;
@property (nonatomic, readonly, strong) id <_BMPLegacySourceInternal> _Nullable to;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalPlayEvent")
@interface _BMPInternalPlayEvent : BMPPlayerEvent
@property (nonatomic, readonly) NSTimeInterval time;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTime:(NSTimeInterval)time OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS_NAMED("_InternalSourcePlaybackFinishedEvent")
@interface _BMPInternalSourcePlaybackFinishedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftEvent")
@interface _BMPInternalTimeShiftEvent : BMPPlayerEvent
/// The position in seconds.
@property (nonatomic, readonly) NSTimeInterval position;
/// The target in seconds.
@property (nonatomic, readonly) NSTimeInterval target;
/// The target timeshift value in seconds.
@property (nonatomic, readonly) NSTimeInterval timeShift;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithPosition:(NSTimeInterval)position target:(NSTimeInterval)target timeShift:(NSTimeInterval)timeShift OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_InternalTimeShiftedEvent")
@interface _BMPInternalTimeShiftedEvent : BMPPlayerEvent
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nullable instancetype)initWithJsonData:(NSDictionary * _Nonnull)jsonData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This is a temporarily workaround for Obj-C usage of the Source as we use Swift only types in SourceInternal
SWIFT_PROTOCOL_NAMED("_LegacySourceInternal") SWIFT_DEPRECATED_MSG("Use SourceInternal instead! (Only available in Swift)")
@protocol _BMPLegacySourceInternal <BMPSource>
@property (nonatomic) BOOL isActive;
@property (nonatomic) enum BMPSourceState state;
@property (nonatomic, readonly, strong) AVURLAsset * _Nonnull urlAsset;
@property (nonatomic, readonly, strong) _BMPAVPlayerItem * _Nonnull playerItem;
@property (nonatomic, readonly) BMPMediaSourceType streamType;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, _BMPLogLevel, "_LogLevel", open) {
  _BMPLogLevelVerbose = 0,
  _BMPLogLevelInfo = 1,
  _BMPLogLevelDebug = 2,
  _BMPLogLevelWarning = 3,
  _BMPLogLevelError = 4,
  _BMPLogLevelNone = 5,
};



SWIFT_CLASS_NAMED("_MasterPlaylistLoadedEvent")
@interface _BMPMasterPlaylistLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MediaInfoCustomData")
@interface _BMPMediaInfoCustomData : NSObject
- (nonnull instancetype)initWithDrm:(_BMPCafDrmConfig * _Nullable)drm metadata:(NSDictionary<NSString *, NSString *> * _Nullable)metadata OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_MetadataMessage")
@interface _BMPMetadataMessage : NSObject
- (nonnull instancetype)initWithReceiverVersion:(BMPGoogleCastReceiverVersion _Nonnull)receiverVersion data:(NSDictionary * _Nonnull)data OBJC_DESIGNATED_INITIALIZER;
- (NSDictionary * _Nonnull)toJsonData SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS_NAMED("_PlayerBufferApi")
@interface _BMPPlayerBufferApi : NSObject
- (nonnull instancetype)initWithDelegate:(id <_BMPBufferApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface _BMPPlayerBufferApi (SWIFT_EXTENSION(BitmovinPlayer)) <BMPBufferApi>
- (BMPBufferLevel * _Nonnull)getLevel:(BMPBufferType)type SWIFT_WARN_UNUSED_RESULT;
- (void)setTargetLevel:(NSTimeInterval)value;
@end


@protocol _BMPPlaylistApiDelegate;

SWIFT_CLASS_NAMED("_PlayerPlaylistApi")
@interface _BMPPlayerPlaylistApi : NSObject <BMPPlaylistApi>
@property (nonatomic, readonly, copy) NSArray<id <BMPSource>> * _Nonnull sources;
- (nonnull instancetype)initWithDelegate:(id <_BMPPlaylistApiDelegate> _Nonnull)delegate OBJC_DESIGNATED_INITIALIZER;
- (void)seekWithSource:(id <BMPSource> _Nonnull)source time:(NSTimeInterval)time;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end







SWIFT_CLASS_NAMED("_RequestMetadata")
@interface _BMPRequestMetadata : NSObject
@property (nonatomic, copy) NSString * _Nonnull downloadType;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic, copy) NSURL * _Nullable redirectUrl;
@property (nonatomic) NSTimeInterval downloadTime;
@property (nonatomic) NSInteger httpStatus;
@property (nonatomic) NSInteger size;
@property (nonatomic) BOOL wasSuccessful;
@property (nonatomic, readonly) BOOL isLocalResource;
- (nonnull instancetype)initWithDownloadType:(NSString * _Nonnull)downloadType url:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("_ResourceLoaderService")
@protocol _BMPResourceLoaderService
- (void)setupResourceLoadersWithSourceItem:(BMPSourceItem * _Nonnull)sourceItem asset:(AVURLAsset * _Nonnull)asset;
@end




SWIFT_PROTOCOL_NAMED("_SourceListenerInternal")
@protocol _BMPSourceListenerInternal <BMPSourceListener>
@optional
- (void)onInternalSourcePlaybackFinished:(_BMPInternalSourcePlaybackFinishedEvent * _Nonnull)event source:(id <BMPSource> _Nonnull)source;
@end

@class BMPSourceOptions;

SWIFT_CLASS_NAMED("_StartOffsetCalculator")
@interface _BMPStartOffsetCalculator : NSObject
+ (NSTimeInterval)calculateStartOffsetForVoDWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions totalDuration:(NSTimeInterval)totalDuration SWIFT_WARN_UNUSED_RESULT;
+ (NSTimeInterval)calculateStartOffsetForLiveWithSourceOptions:(BMPSourceOptions * _Nonnull)sourceOptions maxTimeShift:(NSTimeInterval)maxTimeShift SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("_TimeShiftStatus")
@interface _BMPTimeShiftStatus : NSObject
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftOffset;
@property (nonatomic, readonly) NSTimeInterval lastTimeShiftReachedTime;
@property (nonatomic, readonly, copy) NSDate * _Nonnull lastTimeShiftDate;
- (nonnull instancetype)initWithLastTimeShiftOffset:(NSTimeInterval)lastTimeShiftOffset lastTimeShiftReachedTime:(NSTimeInterval)lastTimeShiftReachedTime lastTimeShiftDate:(NSDate * _Nonnull)lastTimeShiftDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("_UIDeviceVersionHelper")
@interface _BMPUIDeviceVersionHelper : NSObject
- (nonnull instancetype)init;
- (BOOL)isSystemVersionGreaterThanOrEqual:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSystemVersionLessThan:(double)versionToCheck SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS_NAMED("_VariantPlaylistLoadedEvent")
@interface _BMPVariantPlaylistLoadedEvent : NSObject <BMPSourceEvent>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) NSTimeInterval timestamp;
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data requestUrl:(NSURL * _Nonnull)requestUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
